{"version":3,"sources":["webpack:///./src/mixins/profileMixin.js","webpack:///./src/mixins/aclMixin.js"],"names":["fc","FC","auth","methods","getProfile","webId","profile","friends","fetchDocument","profileDoc","p","getSubject","name","getString","vcard","fn","organization","role","photo","getRef","hasPhoto","bday","gender","hasGender","note","getAllRefs","foaf","knows","addressUrl","hasAddress","add","locality","country","postal","region","address","this","getWorkspaces","workspaces","length","console","log","i","w","groups_folder","path","tensions_folder","readFolder","g_folder","t_folder","g_urls","files","t_urls","groups","tensions","makeToast","message","getInboxUrls","inbox_urls","ldp","inbox","getFriends","solid","data","storage","indexFile","itemExists","workspacesDoc","subjects","getAllSubjectsOfType","s","getLiteral","rdf","label","pod","push","subject","asRef","split","getGroups","forEach","folder","f","getTensions","addIndex","fullpath","classe","inst","dateObj","Date","date","toISOString","puti","$store","state","indexes","url","putiDoc","addSubject","newchat","addLiteral","rdfs","addNodeRef","dct","created","save","getIndexes","instances","classes","prti","getNodeRef","findSubjects","puIndexes","index","instance","undefined","title","content","variant","$bvToast","toast","configureInbox","inbox_url","inbox_log_file","inbox_exists","createFolder","logDoc","createDocument","schema","about","getSolidDatasetWithAcl","inboxtWithAcl","agentAccess","getAgentAccess","publicAccess","getPublicAccess","alert","inbox_log_file_exists","hasResourceAcl","hasAccessibleAcl","Error","hasFallbackAcl","resourceAcl","createAclFromFallbackAcl","getResourceAcl","updatedAgentResourceAccess","setAgentResourceAccess","read","append","write","control","updatedAgentDefaultAccess","setAgentDefaultAccess","updatedPublicResourceAccess","setPublicResourceAccess","updatedPublicDefaultAccess","setPublicDefaultAccess","saveAclFor","logFileWithAcl","logAcl","updatedPublicLogAccess"],"mappings":"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","file":"js/chunk-cd1e7e04.a14360a9.js","sourcesContent":["import { fetchDocument } from 'tripledoc';\r\nimport { vcard, foaf, dct, rdfs, ldp , rdf} from 'rdf-namespaces'\r\nimport auth from 'solid-auth-client';\r\nimport FC from 'solid-file-client'\r\nconst fc = new FC( auth )\r\n\r\nexport default {\r\n  methods: {\r\n    getProfile: async function(webId){\r\n      let profile = {friends:[]}\r\n      profile.webId = webId\r\n      try{\r\n        let profileDoc = await fetchDocument(webId);\r\n        const p = profileDoc.getSubject(webId)\r\n        profile.name = p.getString(vcard.fn)\r\n        profile.organization = p.getString(\"http://www.w3.org/2006/vcard/ns#organization-name\")\r\n        profile.role = p.getString(vcard.role)\r\n        profile.photo = p.getRef(vcard.hasPhoto)\r\n        profile.bday = p.getString(vcard.bday)\r\n        profile.gender = p.getString(vcard.hasGender)\r\n        profile.note = p.getString(vcard.note)\r\n        profile.friends = p.getAllRefs(foaf.knows)\r\n        //profile.trustedApps = p.getAllLiterals(\"http://www.w3.org/ns/auth/acl#trustedApp\")\r\n        //  console.log(p)\r\n        //  console.log(acl)\r\n\r\n        //must check if there are many addressUrl\r\n        let addressUrl = p.getRef(vcard.hasAddress)\r\n        //    console.log(\"Address Node \",addressUrl)\r\n        if (addressUrl != null){\r\n          let add = profileDoc.getSubject(addressUrl);\r\n          profile.locality = add.getString(vcard.locality)\r\n          profile.country = add.getString(\"http://www.w3.org/2006/vcard/ns#country-name\")\r\n          profile.postal = add.getString(\"http://www.w3.org/2006/vcard/ns#postal-code\")\r\n          profile.region = add.getString(vcard.region)\r\n          profile.address = add.getString(\"http://www.w3.org/2006/vcard/ns#street-address\")\r\n        }\r\n\r\n        profile.workspaces = await this.getWorkspaces(webId)\r\n\r\n        if (profile.workspaces.length > 0 ){\r\n          console.log(\"PF\",profile.workspaces)\r\n          for(let i in profile.workspaces){\r\n            let w = profile.workspaces[i]\r\n            if(w.name == \"gouvernance\"){\r\n              let groups_folder = w.path+\"groups\"\r\n              let tensions_folder = w.path+\"tensions\"\r\n              console.log(\"ww\",w, groups_folder, tensions_folder)\r\n              let g_folder = await fc.readFolder(groups_folder)\r\n              let t_folder = await fc.readFolder(groups_folder)\r\n              let g_urls = g_folder.files\r\n              let t_urls = t_folder.files\r\n              console.log(g_urls, t_urls)\r\n              profile.groups = g_urls\r\n              profile.tensions = t_urls\r\n\r\n\r\n            }\r\n\r\n\r\n          }\r\n          //  profile.groups = await this.getGroups(webId)\r\n          //  profile.tensions = await this.getTensions(webId)\r\n          console.log(\"PROFILE\",webId, profile)\r\n        }\r\n\r\n        // ???  Does not work profile.photo = await p.getString(vcard.hasPhoto)\r\n        /*  let photo = await solid.data.[webId].vcard$hasPhoto\r\n        profile.photo = `${photo}`*/\r\n      }catch(e){\r\n        //console.log(e)\r\n        this.makeToast(e.message, webId, 'warning')\r\n      }\r\n      //  console.log(profile)\r\n      return profile\r\n    },\r\n    getInboxUrls: async function(webId){\r\n      let inbox_urls = []\r\n      try{\r\n        let profileDoc = await fetchDocument(webId);\r\n        const p = profileDoc.getSubject(webId)\r\n        inbox_urls = await  p.getAllRefs(ldp.inbox )\r\n      }catch(e){\r\n        //alert(webId+\" : \"+e)\r\n        this.makeToast(e.message, webId, 'warning')\r\n      }\r\n      return inbox_urls\r\n    },\r\n    getFriends: async function(webId){\r\n      let friends = []\r\n      try{\r\n        let profileDoc = await fetchDocument(webId);\r\n        const p = profileDoc.getSubject(webId)\r\n        friends = await  p.getAllRefs(foaf.knows )\r\n      }catch(e){\r\n        //alert(webId+\" : \"+e)\r\n        this.makeToast(e.message, webId, 'warning')\r\n      }\r\n      return friends\r\n    },\r\n\r\n\r\n\r\n    getWorkspaces: async function(webId){\r\n\r\n      let workspaces = []\r\n      let storage =  await solid.data[webId].storage\r\n      let indexFile = storage+\"public/popock/workspaces.ttl\"\r\n      //  console.log(webId, storage, indexFile)\r\n      if ( fc.itemExists(indexFile)){\r\n        let workspacesDoc = {}\r\n        try{\r\n          workspacesDoc = await fetchDocument(indexFile)\r\n          let subjects = workspacesDoc.getAllSubjectsOfType(\"http://www.w3.org/ns/pim/space#Workspace\")\r\n          for  (let s of subjects) {\r\n            let name = s.getLiteral(rdf.label)\r\n            let path = s.getRef(\"http://www.w3.org/ns/pim/space#storage\")\r\n            let pod = s.getRef(\"http://www.w3.org/ns/solid/terms#webId\")\r\n            workspaces.push({name: name, path: path, pod: pod, subject: s.asRef().split('#')[1]})\r\n          }\r\n        }catch(e){\r\n          //  console.log(e)\r\n          //  workspacesDoc = await createDocument(indexFile)\r\n        }\r\n      }\r\n\r\n\r\n      //console.log(\"WWWW workspaces\",workspaces)\r\n      return workspaces\r\n    },\r\n    getGroups: async function(webId){\r\n      let groups = []\r\n      let   workspaces = await this.getWorkspaces(webId)\r\n\r\n      if (workspaces.length > 0){\r\n        console.log(webId, workspaces)\r\n        workspaces.forEach(async function (w) {\r\n\r\n          if(w.name == 'gouvernance'){\r\n            console.log(w.name, w.path, w.subject)\r\n            let folder = w.path+'groups'\r\n            console.log(\"groups_folder\", folder)\r\n            let f = await fc.readFolder(folder)\r\n            groups = f.files\r\n            console.log(\"GGGGGGGRRRRoups 2\",groups)\r\n            return groups\r\n          }\r\n        });\r\n\r\n      }\r\n\r\n    },\r\n\r\n    getTensions: async function(webId){\r\n      let tensions = []\r\n      let   workspaces = await this.getWorkspaces(webId)\r\n\r\n      if (workspaces.length > 0){\r\n        console.log(webId, workspaces)\r\n        workspaces.forEach(async function (w) {\r\n          console.log(w.name, w.path, w.subject)\r\n          if(w.name == 'gouvernance'){\r\n            let folder = w.path+'tensions'\r\n            console.log(\"TTTTTTTTTension folder\", folder)\r\n            let f = await fc.readFolder(folder)\r\n            tensions = f.files\r\n            console.log(\"TTTTTENSIONS\",tensions)\r\n          }\r\n        });\r\n      }\r\n      return tensions\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    addIndex: async function(fullpath, classe, name){\r\n      let inst  =  fullpath+\"/index.ttl#this\"\r\n      var dateObj = new Date();\r\n      var date = dateObj.toISOString()\r\n\r\n      //      console.log(inst, classe, name, webId)\r\n      let puti = this.$store.state.solid.indexes.puti\r\n      //    console.log(puti)\r\n      let putiDoc = await fetchDocument(puti.url)\r\n      let newchat = await putiDoc.addSubject()\r\n      //subj.addLiteral(dct.created, date)\r\n      newchat.addLiteral(rdfs.label, name)\r\n      newchat.addNodeRef(\"http://www.w3.org/ns/solid/terms#forClass\", classe)\r\n      newchat.addNodeRef(\"http://www.w3.org/ns/solid/terms#instance\", inst)\r\n      newchat.addLiteral(dct.created, date)\r\n      await putiDoc.save();\r\n\r\n    },\r\n    getIndexes: async function(webId){\r\n      let indexes = {puti: {instances: [], classes: []}, prti: {instances: [], classes: []}}\r\n      try{\r\n        let profileDoc = await fetchDocument(webId);\r\n        const subject = profileDoc.getSubject(webId)\r\n\r\n        let puti = await  subject.getNodeRef(\"http://www.w3.org/ns/solid/terms#publicTypeIndex\" )\r\n        let prti = await  subject.getNodeRef(\"http://www.w3.org/ns/solid/terms#privateTypeIndex\" )\r\n\r\n        //    console.log(puti)\r\n        //    console.log(prti)\r\n        indexes.puti.url = puti\r\n        indexes.prti.url = prti\r\n        let putiDoc = await fetchDocument(puti)\r\n        //  let prtiDoc = await fetchDocument(prti)\r\n        //    console.log(putiDoc)\r\n        //    console.log(prtiDoc)\r\n        let puIndexes = await putiDoc.findSubjects(\"http://www.w3.org/ns/solid/terms#forClass\")\r\n        //  let prIndexes = await prtiDoc.findSubjects(\"http://www.w3.org/ns/solid/terms#forClass\")\r\n        //    console.log(puIndexes,prIndexes)\r\n\r\n        puIndexes.forEach( async function(index) {\r\n          let classe = await index.getRef(\"http://www.w3.org/ns/solid/terms#forClass\")\r\n          let instance = await index.getRef(\"http://www.w3.org/ns/solid/terms#instance\")\r\n          let created = await index.getString(dct.created)\r\n          let label = await index.getString(rdfs.label)\r\n          //    console.log(instance, classe)\r\n          indexes.puti.instances.push({instance: instance, classe: classe, label: label, created: created})\r\n          indexes.puti.classes[classe] ==  undefined ? indexes.puti.classes[classe] = [] : \"\"\r\n          indexes.puti.classes[classe].push(instance)\r\n        });\r\n\r\n        /*  prIndexes.forEach( async function(index) {\r\n        let classe = await index.getRef(\"http://www.w3.org/ns/solid/terms#forClass\")\r\n        let instance = await index.getRef(\"http://www.w3.org/ns/solid/terms#instance\")\r\n        let created = await index.getString(dct.created)\r\n        let label = await index.getString(rdfs.label)\r\n        //    console.log(instance, classe)\r\n        indexes.prti.instances.push({instance: instance, classe: classe, label: label, created: created})\r\n        indexes.prti.classes[classe] ==  undefined ? indexes.prti.classes[classe] = [] : \"\"\r\n        indexes.prti.classes[classe].push(instance)\r\n      });*/\r\n\r\n\r\n\r\n    }catch(e){\r\n      //  console.log(e)\r\n    }\r\n    console.log(webId, indexes)\r\n    return indexes\r\n  },\r\n  makeToast(title, content,variant = null) {\r\n    this.$bvToast.toast(content , {\r\n      title: title,\r\n      variant: variant,\r\n      solid: true\r\n    })\r\n  }\r\n}\r\n\r\n\r\n}\r\n","//https://docs.inrupt.com/client-libraries/solid-client-js/tutorial/manage-access-control-list.html\r\nimport {\r\n  getSolidDatasetWithAcl,\r\n  getPublicAccess,\r\n  hasResourceAcl,\r\n  hasFallbackAcl,\r\n  hasAccessibleAcl,\r\n  //createAcl,\r\n  createAclFromFallbackAcl,\r\n  getResourceAcl,\r\n  getAgentAccess,\r\n  //  getAgentAccessAll,\r\n  //  setAgentResourceAccess,\r\n  setAgentResourceAccess,\r\n  setAgentDefaultAccess,\r\n  setPublicResourceAccess,\r\n  setPublicDefaultAccess,\r\n  saveAclFor,\r\n} from \"@inrupt/solid-client\";\r\n\r\nimport { fetchDocument, createDocument } from 'tripledoc';\r\nimport { schema } from 'rdf-namespaces'\r\n\r\nimport auth from 'solid-auth-client';\r\nimport FC from 'solid-file-client'\r\nconst fc = new FC( auth )\r\n\r\nexport default {\r\n  created(){\r\n\r\n  },\r\n  methods: {\r\n    async configureInbox(inbox_url, webId){\r\n      console.log(\"configureInbox\",inbox_url, webId,this.storage)\r\n      let inbox_log_file = this.storage+\"popock/inbox_log.ttl\"\r\n      let inbox_exists = await fc.itemExists(inbox_url)\r\n      if (!inbox_exists){\r\n        await fc.createFolder(inbox_url)\r\n      }\r\n\r\n\r\n      let logDoc ={}\r\n      try{\r\n        logDoc = await fetchDocument(inbox_log_file);\r\n      } catch(e){\r\n        logDoc = await createDocument(inbox_log_file);\r\n        let s = logDoc.addSubject()\r\n        s.addNodeRef(schema.about, \"init\")\r\n        //  console.log(logDoc)\r\n        await logDoc.save()\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      try{\r\n        const inboxtWithAcl = await getSolidDatasetWithAcl(inbox_url);\r\n        const agentAccess = getAgentAccess(inboxtWithAcl, webId);\r\n        const publicAccess = getPublicAccess(inboxtWithAcl);\r\n        if(agentAccess == null){\r\n          alert (\"Are you sure that you have allowed me to 'CONTROL' your POD, I can't read Acl of \"+inbox_url+\". I got a NULL value !! Please check your POD / Preferences / Trusted Application. \")\r\n        }\r\n\r\n        /*  if( !(await fc.itemExists(inbox_log_file)) ) {\r\n        console.log(\"creation:\",inbox_log_file)\r\n        await fc.postFile( inbox_log_file, \" \", \"text/turtle\") // only create if it doesn't already exist\r\n      }*/\r\n\r\n\r\n\r\n\r\n\r\n      console.log(\"inbox_url: \", inbox_url, \"inbox_exists: \", inbox_exists, \"agentAcces: \", agentAccess, \"publicAccess:\", publicAccess )\r\n      let inbox_log_file_exists = await fc.itemExists(inbox_log_file)\r\n      console.log(\"inbox_log_file_exists:\", inbox_log_file_exists)\r\n\r\n\r\n\r\n      let resourceAcl;\r\n      if (!hasResourceAcl(inboxtWithAcl)) {\r\n        if (!hasAccessibleAcl(inboxtWithAcl)) {\r\n          throw new Error(\r\n            \"The current user does not have permission to change access rights to this Resource.\"\r\n          );\r\n        }\r\n        if (!hasFallbackAcl(inboxtWithAcl)) {\r\n          throw new Error(\r\n            \"The current user does not have permission to see who currently has access to this Resource.\"\r\n          );\r\n          // Alternatively, initialise a new empty ACL as follows,\r\n          // but be aware that if you do not give someone Control access,\r\n          // **nobody will ever be able to change Access permissions in the future**:\r\n          // resourceAcl = createAcl(myDatasetWithAcl);\r\n        }\r\n        resourceAcl = createAclFromFallbackAcl(inboxtWithAcl);\r\n      } else {\r\n        resourceAcl = getResourceAcl(inboxtWithAcl);\r\n      }\r\n\r\n\r\n      const updatedAgentResourceAccess = setAgentResourceAccess(\r\n        resourceAcl,\r\n        webId,\r\n        { read: true, append: true, write: true, control: true },\r\n      );\r\n      const updatedAgentDefaultAccess = setAgentDefaultAccess(\r\n        resourceAcl,\r\n        webId,\r\n        { read: true, append: true, write: true, control: true },\r\n      );\r\n      const updatedPublicResourceAccess = setPublicResourceAccess(\r\n        resourceAcl,\r\n        { read: true, append: true, write: false, control: false },\r\n      );\r\n      const updatedPublicDefaultAccess = setPublicDefaultAccess(\r\n        resourceAcl,\r\n        { read: false, append: true, write: false, control: false },\r\n      );\r\n\r\n      //    console.log(\"DOSSIER, EVERYONE POSTER, DEFAULT EVERYONE SUBMITTERS\",updatedAgentResourceAccess, updatedAgentResourceAccess)\r\n      try{\r\n        // Now save the ACL:\r\n        await saveAclFor(inboxtWithAcl, updatedAgentResourceAccess);\r\n        console.log(\"owner Resource\")\r\n      }catch(e){\r\n        console.log(\"todo if 409 conflict : must test if ok before patch\" /*,e*/)          }\r\n        try{\r\n          await saveAclFor(inboxtWithAcl, updatedAgentDefaultAccess);\r\n          console.log(\"owner default\")\r\n        }catch(e){\r\n          console.log(\"todo if 409 conflict : must test if ok before patch\" /*,e*/)          }\r\n          try{\r\n            await saveAclFor(inboxtWithAcl, updatedPublicResourceAccess);\r\n            console.log(\"posters Resource\")\r\n          }catch(e){\r\n            console.log(\"todo if 409 conflict : must test if ok before patch\" /*,e*/)\r\n          }\r\n          try{\r\n            await saveAclFor(inboxtWithAcl, updatedPublicDefaultAccess);\r\n            console.log(\"submitters Default\")\r\n\r\n          }catch(e){\r\n            console.log(\"todo if 409 conflict : must test if ok before patch\" /*,e*/)\r\n          }\r\n\r\n\r\n          const logFileWithAcl = await getSolidDatasetWithAcl(inbox_log_file);\r\n\r\n          let logAcl;\r\n          if (!hasResourceAcl(logFileWithAcl)) {\r\n            if (!hasAccessibleAcl(logFileWithAcl)) {\r\n              throw new Error(\r\n                \"The current user does not have permission to change access rights to this Resource.\"\r\n              );\r\n            }\r\n            if (!hasFallbackAcl(logFileWithAcl)) {\r\n              throw new Error(\r\n                \"The current user does not have permission to see who currently has access to this Resource.\"\r\n              );\r\n              // Alternatively, initialise a new empty ACL as follows,\r\n              // but be aware that if you do not give someone Control access,\r\n              // **nobody will ever be able to change Access permissions in the future**:\r\n              // resourceAcl = createAcl(myDatasetWithAcl);\r\n            }\r\n            logAcl = createAclFromFallbackAcl(logFileWithAcl);\r\n          } else {\r\n            logAcl = getResourceAcl(logFileWithAcl);\r\n          }\r\n\r\n          console.log(\"Log acl\", logAcl)\r\n          const updatedPublicLogAccess = setPublicResourceAccess(\r\n            logAcl,\r\n            { read: true, append: true, write: false, control: false },\r\n          );\r\n          //    try{\r\n          await saveAclFor(logFileWithAcl, updatedPublicLogAccess);\r\n          console.log(\"logfile Default\")\r\n\r\n          //  }catch(e){\r\n          //  console.log(\"todo if 409 conflict : must test if ok before patch\" /*,e*/)\r\n          //}\r\n\r\n          //console.log(\"just for block\",inboxtWithAcl, updatedAcl,saveAclFor);\r\n\r\n        }catch(e){\r\n          console.log(\"erreur\",e)\r\n        }\r\n\r\n        // cleaning for debug\r\n        //await fc.deleteFile(inbox_log_file)\r\n\r\n\r\n\r\n      },\r\n\r\n    }\r\n  }\r\n"],"sourceRoot":""}