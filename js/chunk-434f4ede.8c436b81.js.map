{"version":3,"sources":["webpack:///./node_modules/@rdfjs/data-model/lib/named-node.js","webpack:///./node_modules/core-js/modules/es.string.split.js","webpack:///./node_modules/core-js/internals/regexp-exec-abstract.js","webpack:///./node_modules/@rdfjs/data-model/lib/data-factory.js","webpack:///./node_modules/core-js/internals/is-regexp.js","webpack:///./node_modules/@rdfjs/data-model/lib/blank-node.js","webpack:///./node_modules/core-js/internals/not-a-regexp.js","webpack:///./node_modules/@rdfjs/data-model/lib/literal.js","webpack:///./node_modules/cross-fetch/dist/browser-ponyfill.js","webpack:///./node_modules/core-js/internals/string-multibyte.js","webpack:///./node_modules/core-js/modules/es.string.ends-with.js","webpack:///./node_modules/core-js/internals/advance-string-index.js","webpack:///./node_modules/core-js/internals/regexp-exec.js","webpack:///./node_modules/@rdfjs/data-model/index.js","webpack:///./node_modules/core-js/internals/regexp-sticky-helpers.js","webpack:///./node_modules/core-js/modules/es.array.join.js","webpack:///./node_modules/@rdfjs/data-model/lib/variable.js","webpack:///./node_modules/core-js/internals/correct-is-regexp-logic.js","webpack:///./node_modules/core-js/modules/es.regexp.exec.js","webpack:///./node_modules/core-js/internals/regexp-flags.js","webpack:///./node_modules/@rdfjs/dataset/index.js","webpack:///./node_modules/@rdfjs/data-model/lib/default-graph.js","webpack:///./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","webpack:///./node_modules/@rdfjs/data-model/lib/quad.js","webpack:///./node_modules/@inrupt/solid-client/dist/index.es.js","webpack:///./src/mixins/aclMixin.js","webpack:///./node_modules/@rdfjs/dataset/DatasetCore.js","webpack:///./node_modules/@rdfjs/dataset/isMatch.js"],"names":["NamedNode","iri","this","value","prototype","equals","other","termType","module","exports","fixRegExpWellKnownSymbolLogic","isRegExp","anObject","requireObjectCoercible","speciesConstructor","advanceStringIndex","toLength","callRegExpExec","regexpExec","fails","arrayPush","push","min","Math","MAX_UINT32","SUPPORTS_Y","RegExp","SPLIT","nativeSplit","maybeCallNative","internalSplit","split","length","separator","limit","string","String","lim","undefined","call","match","lastIndex","lastLength","output","flags","ignoreCase","multiline","unicode","sticky","lastLastIndex","separatorCopy","source","slice","index","apply","test","O","splitter","regexp","res","done","rx","S","C","unicodeMatching","p","q","A","e","z","i","classof","R","exec","result","TypeError","BlankNode","DefaultGraph","Literal","Quad","Variable","DataFactory","namedNode","blankNode","literal","languageOrDatatype","indexOf","defaultGraph","defaultGraphInstance","variable","triple","subject","predicate","object","quad","graph","isObject","wellKnownSymbol","MATCH","it","id","nextId","language","datatype","stringDatatype","langStringDatatype","__self__","root","F","fetch","DOMException","self","support","searchParams","iterable","Symbol","blob","Blob","formData","arrayBuffer","isDataView","obj","DataView","isPrototypeOf","viewClasses","isArrayBufferView","ArrayBuffer","isView","Object","toString","normalizeName","name","toLowerCase","normalizeValue","iteratorFor","items","iterator","next","shift","Headers","headers","map","forEach","append","Array","isArray","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","onerror","error","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","view","Uint8Array","chars","fromCharCode","join","bufferClone","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","get","type","rejected","Error","then","text","decode","json","JSON","parse","oldValue","has","hasOwnProperty","callback","thisArg","keys","values","entries","methods","normalizeMethod","method","upcased","toUpperCase","Request","input","options","url","credentials","mode","signal","referrer","form","trim","bytes","replace","decodeURIComponent","parseHeaders","rawHeaders","preProcessedHeaders","line","parts","key","Response","bodyInit","status","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","err","message","stack","create","constructor","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","default","toInteger","createMethod","CONVERT_TO_STRING","$this","pos","first","second","position","size","charCodeAt","charAt","codeAt","$","getOwnPropertyDescriptor","f","notARegExp","correctIsRegExpLogic","IS_PURE","nativeEndsWith","endsWith","CORRECT_IS_REGEXP_LOGIC","MDN_POLYFILL_BUG","descriptor","writable","target","proto","forced","searchString","that","endPosition","arguments","len","end","search","regexpFlags","stickyHelpers","nativeExec","nativeReplace","patchedExec","UPDATES_LAST_INDEX_WRONG","re1","re2","UNSUPPORTED_Y","BROKEN_CARET","NPCG_INCLUDED","PATCH","str","reCopy","re","charsAdded","strCopy","global","RE","s","IndexedObject","toIndexedObject","arrayMethodIsStrict","nativeJoin","ES3_STRINGS","STRICT_METHOD","METHOD_NAME","dotAll","rdf","DatasetCore","dataset","quads","assign","redefine","createNonEnumerableProperty","SPECIES","REPLACE_SUPPORTS_NAMED_GROUPS","groups","a","REPLACE_KEEPS_$0","REPLACE","REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","originalExec","KEY","sham","SYMBOL","DELEGATES_TO_SYMBOL","DELEGATES_TO_EXEC","execCalled","nativeRegExpMethod","nativeMethod","arg2","forceStringMethod","stringMethod","regexMethod","arg","__awaiter","_arguments","P","generator","adopt","fulfilled","step","internal_toIriString","hasResourceInfo","potentialResourceInfo","internal_resourceInfo","hasChangelog","potentialChangeLog","internal_changeLog","additions","deletions","hasAcl","potentialAcl","internal_acl","hasAccessibleAcl","aclUrl","resource","acl","Authorization","accessTo","agent","agentGroup","agentClass","origin","foaf","Agent","add","filter","triplesToTurtle","format","writer","triples","addQuads","writePromise","rawTurtle","turtleToTriples","raw","resourceIri","parser","baseIRI","parsingPromise","parsedTriples","_prefixes","isNamedNode","isLocalNode","internal_name","getLocalNode","localNode","asNamedNode","URL","isEqual","node1","node2","namedNode1","resolveIriForLocalNode","namedNode2","resolveIriForLocalNodes","resolveLocalIri","thingIri","hash","href","getSolidDataset","internal_defaultFetchOptions","config","Accept","data","resourceInfo","internal_parseResourceInfo","resourceWithResourceInfo","getSolidDatasetWithAcl","solidDataset","internal_fetchAcl","saveSolidDatasetAt","requestInit","isUpdate","deleteStatement","getNamedNodesForLocalNodes","insertStatement","from","Link","sourceIri","isRawData","storedDataset","storedDatasetWithResolvedIris","resolveLocalIrisInSolidDataset","getNamedNodeFromLocalNode","getSourceUrl","unresolvedQuads","unresolvedQuad","resolvedQuad","delete","getThing","thingUrl","scope","thingDataset","thing","internal_localSubject","internal_url","getThingAll","subjectNodes","quadSubject","some","subjectNode","things","setThing","newDataset","removeThing","includes","deletion","newSolidDataset","withChangeLog","cloneLitStructs","thingSubject","toNode","addition","freshDataset","internal_isAclDataset","internal_accessTo","createThing","_a","generateName","localSubject","asUrl","baseUrl","isThingLocal","asIri","cloneThing","cloned","filterThing","filtered","Date","now","random","substring","getUrl","property","namedNodeMatcher","getNamedNodeMatcher","matchingQuad","findOne","getIri","getUrlAll","iriMatcher","matchingQuads","findAll","getIriAll","matcher","matched","predicateNode","removeAll","updatedThing","removeUrl","iriNode","removeIri","setUrl","newThing","setIri","internal_fetchResourceAcl","aclSolidDataset","internal_fetchFallbackAcl","resourceUrl","resourcePath","pathname","containerPath","getContainerPath","containerIri","containerInfo","internal_fetchResourceInfo","containerAcl","resourcePathWithoutTrailingSlash","lastIndexOf","hasResourceAcl","resourceAcl","getResourceAcl","hasFallbackAcl","fallbackAcl","createAcl","targetResource","emptyResourceAcl","createAclFromFallbackAcl","fallbackAclRules","internal_getAclRules","defaultAclRules","internal_getDefaultAclRulesForResource","resourceAclRules","rule","initialisedResourceAcl","reduce","aclDataset","isAclRule","internal_getResourceAclRulesForResource","aclRules","appliesToResource","aclRule","isDefaultForResource","internal_getAccess","ruleAccessModes","writeAccess","internal_accessModeIriStrings","write","read","control","internal_combineAccessModes","modes","accumulator","current","internal_removeEmptyAclRules","aclRulesToRemove","isEmptyAclRule","updatedAclDataset","isAclQuad","saveAclFor","savedDataset","savedAclDataset","internal_initialiseAclRule","access","newRule","addIri","internal_duplicateAclRule","sourceRule","targetRule","copyIris","inputRule","outputRule","iriTarget","all","_b","_c","contentTypeParts","isSolidDataset","contentType","linkHeader","parsedLinks","aclLinks","uri","wacAllowHeader","permissions","parseWacAllowHeader","parsePermissionStatement","permissionStatement","writePermission","getStatementFor","relevantEntries","rawEntry","relevantStatement","user","public","addUrl","getPublicAccess","getPublicResourceAccess","getPublicDefaultAccess","allRules","resourceRules","publicResourceRules","getClassAclRulesForClass","publicAccessModes","setPublicDefaultAccess","filteredAcl","filteredRule","remainingRule","removePublicFromRule","updatedAcl","cleanedAcl","ruleType","emptyRule","ruleWithoutPublic","ruleForOtherTargets","appliesToClass","created","readPublicAccess","myDatasetWithAcl","publicAccess","console","log","setPublicAccess","pattern","isMatch","Set","localQuad","matches"],"mappings":"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","file":"js/chunk-434f4ede.8c436b81.js","sourcesContent":["function NamedNode (iri) {\n  this.value = iri\n}\n\nNamedNode.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value\n}\n\nNamedNode.prototype.termType = 'NamedNode'\n\nmodule.exports = NamedNode\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar isRegExp = require('../internals/is-regexp');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar toLength = require('../internals/to-length');\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\nvar regexpExec = require('../internals/regexp-exec');\nvar fails = require('../internals/fails');\n\nvar arrayPush = [].push;\nvar min = Math.min;\nvar MAX_UINT32 = 0xFFFFFFFF;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return nativeSplit.call(string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output.length > lim ? output.slice(0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n}, !SUPPORTS_Y);\n","var classof = require('./classof-raw');\nvar regexpExec = require('./regexp-exec');\n\n// `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n\n  if (classof(R) !== 'RegExp') {\n    throw TypeError('RegExp#exec called on incompatible receiver');\n  }\n\n  return regexpExec.call(R, S);\n};\n\n","var BlankNode = require('./blank-node')\nvar DefaultGraph = require('./default-graph')\nvar Literal = require('./literal')\nvar NamedNode = require('./named-node')\nvar Quad = require('./quad')\nvar Variable = require('./variable')\n\nfunction DataFactory () {}\n\nDataFactory.namedNode = function (value) {\n  return new NamedNode(value)\n}\n\nDataFactory.blankNode = function (value) {\n  return new BlankNode(value)\n}\n\nDataFactory.literal = function (value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype)\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))\n  }\n\n  return new Literal(value, null, languageOrDatatype)\n}\n\nDataFactory.defaultGraph = function () {\n  return DataFactory.defaultGraphInstance\n}\n\nDataFactory.variable = function (value) {\n  return new Variable(value)\n}\n\nDataFactory.triple = function (subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object)\n}\n\nDataFactory.quad = function (subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)\n}\n\nDataFactory.defaultGraphInstance = new DefaultGraph()\n\nmodule.exports = DataFactory\n","var isObject = require('../internals/is-object');\nvar classof = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.github.io/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n","function BlankNode (id) {\n  this.value = id || ('b' + (++BlankNode.nextId))\n}\n\nBlankNode.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value\n}\n\nBlankNode.prototype.termType = 'BlankNode'\n\nBlankNode.nextId = 0\n\nmodule.exports = BlankNode\n","var isRegExp = require('../internals/is-regexp');\n\nmodule.exports = function (it) {\n  if (isRegExp(it)) {\n    throw TypeError(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n","var NamedNode = require('./named-node')\n\nfunction Literal (value, language, datatype) {\n  this.value = value\n  this.datatype = Literal.stringDatatype\n  this.language = ''\n\n  if (language) {\n    this.language = language\n    this.datatype = Literal.langStringDatatype\n  } else if (datatype) {\n    this.datatype = datatype\n  }\n}\n\nLiteral.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value &&\n    other.language === this.language && other.datatype.equals(this.datatype)\n}\n\nLiteral.prototype.termType = 'Literal'\nLiteral.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')\nLiteral.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')\n\nmodule.exports = Literal\n","var __self__ = (function (root) {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = root.DOMException\n}\nF.prototype = root;\nreturn new F();\n})(typeof self !== 'undefined' ? self : this);\n(function(self) {\n\nvar irrelevant = (function (exports) {\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  return exports;\n\n}({}));\n})(__self__);\ndelete __self__.fetch.polyfill\nexports = __self__.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = __self__.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = __self__.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = __self__.Headers\nexports.Request = __self__.Request\nexports.Response = __self__.Response\nmodule.exports = exports\n","var toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.{ codePointAt, at }` methods implementation\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = String(requireObjectCoercible($this));\n    var position = toInteger(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = S.charCodeAt(position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING ? S.charAt(position) : first\n        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar toLength = require('../internals/to-length');\nvar notARegExp = require('../internals/not-a-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\nvar IS_PURE = require('../internals/is-pure');\n\nvar nativeEndsWith = ''.endsWith;\nvar min = Math.min;\n\nvar CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');\n// https://github.com/zloirock/core-js/pull/702\nvar MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {\n  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');\n  return descriptor && !descriptor.writable;\n}();\n\n// `String.prototype.endsWith` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.endswith\n$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = String(requireObjectCoercible(this));\n    notARegExp(searchString);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : min(toLength(endPosition), len);\n    var search = String(searchString);\n    return nativeEndsWith\n      ? nativeEndsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n","'use strict';\nvar regexpFlags = require('./regexp-flags');\nvar stickyHelpers = require('./regexp-sticky-helpers');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n    var sticky = UNSUPPORTED_Y && re.sticky;\n    var flags = regexpFlags.call(re);\n    var source = re.source;\n    var charsAdded = 0;\n    var strCopy = str;\n\n    if (sticky) {\n      flags = flags.replace('y', '');\n      if (flags.indexOf('g') === -1) {\n        flags += 'g';\n      }\n\n      strCopy = String(str).slice(re.lastIndex);\n      // Support anchored sticky behavior.\n      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\\n')) {\n        source = '(?: ' + source + ')';\n        strCopy = ' ' + strCopy;\n        charsAdded++;\n      }\n      // ^(? + rx + ) is needed, in combination with some str slicing, to\n      // simulate the 'y' flag.\n      reCopy = new RegExp('^(?:' + source + ')', flags);\n    }\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + source + '$(?!\\\\s)', flags);\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = nativeExec.call(sticky ? reCopy : re, strCopy);\n\n    if (sticky) {\n      if (match) {\n        match.input = match.input.slice(charsAdded);\n        match[0] = match[0].slice(charsAdded);\n        match.index = re.lastIndex;\n        re.lastIndex += match[0].length;\n      } else re.lastIndex = 0;\n    } else if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n","var DataFactory = require('./lib/data-factory')\n\nmodule.exports = DataFactory\n","'use strict';\n\nvar fails = require('./fails');\n\n// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,\n// so we use an intermediate function.\nfunction RE(s, f) {\n  return RegExp(s, f);\n}\n\nexports.UNSUPPORTED_Y = fails(function () {\n  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError\n  var re = RE('a', 'y');\n  re.lastIndex = 2;\n  return re.exec('abcd') != null;\n});\n\nexports.BROKEN_CARET = fails(function () {\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687\n  var re = RE('^r', 'gy');\n  re.lastIndex = 2;\n  return re.exec('str') != null;\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","function Variable (name) {\n  this.value = name\n}\n\nVariable.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value\n}\n\nVariable.prototype.termType = 'Variable'\n\nmodule.exports = Variable\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (e) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (f) { /* empty */ }\n  } return false;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar exec = require('../internals/regexp-exec');\n\n$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {\n  exec: exec\n});\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","const rdf = require('@rdfjs/data-model')\nconst DatasetCore = require('./DatasetCore')\n\nfunction dataset (quads) {\n  return new DatasetCore(quads)\n}\n\nmodule.exports = Object.assign({ dataset }, rdf)\n","function DefaultGraph () {\n  this.value = ''\n}\n\nDefaultGraph.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType\n}\n\nDefaultGraph.prototype.termType = 'DefaultGraph'\n\nmodule.exports = DefaultGraph\n","'use strict';\n// TODO: Remove from `core-js@4` since it's moved to entry points\nrequire('../modules/es.regexp.exec');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar regexpExec = require('../internals/regexp-exec');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar SPECIES = wellKnownSymbol('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// IE <= 11 replaces $0 with the whole match, as if it was $&\n// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0\nvar REPLACE_KEEPS_$0 = (function () {\n  return 'a'.replace(/./, '$0') === '$0';\n})();\n\nvar REPLACE = wellKnownSymbol('replace');\n// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string\nvar REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {\n  if (/./[REPLACE]) {\n    return /./[REPLACE]('a', '$0') === '';\n  }\n  return false;\n})();\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\nmodule.exports = function (KEY, length, exec, sham) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !(\n      REPLACE_SUPPORTS_NAMED_GROUPS &&\n      REPLACE_KEEPS_$0 &&\n      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n    )) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n        }\n        return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n      }\n      return { done: false };\n    }, {\n      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,\n      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n    });\n    var stringMethod = methods[0];\n    var regexMethod = methods[1];\n\n    redefine(String.prototype, KEY, stringMethod);\n    redefine(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return regexMethod.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return regexMethod.call(string, this); }\n    );\n  }\n\n  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);\n};\n","var DefaultGraph = require('./default-graph')\n\nfunction Quad (subject, predicate, object, graph) {\n  this.subject = subject\n  this.predicate = predicate\n  this.object = object\n\n  if (graph) {\n    this.graph = graph\n  } else {\n    this.graph = new DefaultGraph()\n  }\n}\n\nQuad.prototype.equals = function (other) {\n  return !!other && other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&\n    other.object.equals(this.object) && other.graph.equals(this.graph)\n}\n\nmodule.exports = Quad\n","import LinkHeader from 'http-link-header';\nimport { quad, literal, namedNode, blankNode, dataset } from '@rdfjs/dataset';\nimport { Writer, Parser } from 'n3';\nimport { Headers } from 'cross-fetch';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @internal */\r\nfunction internal_toIriString(iri) {\r\n    return typeof iri === \"string\" ? iri : iri.value;\r\n}\r\n/**\r\n * Verify whether a given SolidDataset includes metadata about where it was retrieved from.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.\r\n * @returns True if `dataset` includes metadata about the Resource it was retrieved from, false if not.\r\n */\r\nfunction hasResourceInfo(dataset) {\r\n    const potentialResourceInfo = dataset;\r\n    return typeof potentialResourceInfo.internal_resourceInfo === \"object\";\r\n}\r\n/** @internal */\r\nfunction hasChangelog(dataset) {\r\n    const potentialChangeLog = dataset;\r\n    return (typeof potentialChangeLog.internal_changeLog === \"object\" &&\r\n        Array.isArray(potentialChangeLog.internal_changeLog.additions) &&\r\n        Array.isArray(potentialChangeLog.internal_changeLog.deletions));\r\n}\r\n/**\r\n * Verify whether a given SolidDataset was fetched together with its Access Control List.\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have its ACLs attached.\r\n * @returns True if `dataset` was fetched together with its ACLs.\r\n */\r\nfunction hasAcl(dataset) {\r\n    const potentialAcl = dataset;\r\n    return typeof potentialAcl.internal_acl === \"object\";\r\n}\r\n/**\r\n * Given a [[SolidDataset]], verify whether its Access Control List is accessible to the current user.\r\n *\r\n * This should generally only be true for SolidDatasets fetched by\r\n * [[getSolidDatasetWithAcl]].\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param dataset A [[SolidDataset]].\r\n * @returns Whether the given `dataset` has a an ACL that is accessible to the current user.\r\n */\r\nfunction hasAccessibleAcl(dataset) {\r\n    return typeof dataset.internal_resourceInfo.aclUrl === \"string\";\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * @ignore Internal fallback for when no fetcher is provided; not to be used downstream.\r\n */\r\nconst fetch = (resource, init) => {\r\n    // Implementation note: it's up to the client application to resolve these module names to the\r\n    // respective npm packages. At least one commonly used tool (Webpack) is only able to do that if\r\n    // the module names are literal strings.\r\n    // Additionally, Webpack throws a warning in a way that halts compilation for at least Next.js\r\n    // when using native Javascript dynamic imports (`import()`), whereas `require()` just logs a\r\n    // warning. Since the use of package names instead of file names requires a bundles anyway, this\r\n    // should not have any practical consequences. For more background, see:\r\n    // https://github.com/webpack/webpack/issues/7713\r\n    let fetch;\r\n    try {\r\n        fetch = require(\"solid-auth-client\").fetch;\r\n    }\r\n    catch (e) {\r\n        fetch = require(\"cross-fetch\");\r\n    }\r\n    return fetch(resource, init);\r\n};\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n// TODO: These should be replaced by auto-generated constants,\r\n//       if we can ensure that unused constants will be excluded from bundles.\r\n/** @internal */\r\nconst acl = {\r\n    Authorization: \"http://www.w3.org/ns/auth/acl#Authorization\",\r\n    accessTo: \"http://www.w3.org/ns/auth/acl#accessTo\",\r\n    agent: \"http://www.w3.org/ns/auth/acl#agent\",\r\n    agentGroup: \"http://www.w3.org/ns/auth/acl#agentGroup\",\r\n    agentClass: \"http://www.w3.org/ns/auth/acl#agentClass\",\r\n    default: \"http://www.w3.org/ns/auth/acl#default\",\r\n    mode: \"http://www.w3.org/ns/auth/acl#mode\",\r\n    origin: \"http://www.w3.org/ns/auth/acl#origin\",\r\n};\r\n/** @internal */\r\nconst rdf = {\r\n    type: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",\r\n};\r\n/** @internal */\r\nconst foaf = {\r\n    Agent: \"http://xmlns.com/foaf/0.1/Agent\",\r\n};\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst DataFactory = { quad, literal, namedNode, blankNode };\r\n/**\r\n * Clone a Dataset.\r\n *\r\n * Note that the Quads are not cloned, i.e. if you modify the Quads in the output Dataset, the Quads\r\n * in the input Dataset will also be changed.\r\n *\r\n * @internal\r\n * @param input Dataset to clone.\r\n * @returns A new Dataset with the same Quads as `input`.\r\n */\r\nfunction clone(input) {\r\n    const output = dataset();\r\n    for (const quad of input) {\r\n        output.add(quad);\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * @internal\r\n * @param input Dataset to clone.\r\n * @param callback Function that takes a Quad, and returns a boolean indicating whether that Quad should be included in the cloned Dataset.\r\n * @returns A new Dataset with the same Quads as `input`, excluding the ones for which `callback` returned `false`.\r\n */\r\nfunction filter(input, callback) {\r\n    const output = dataset();\r\n    for (const quad of input) {\r\n        if (callback(quad)) {\r\n            output.add(quad);\r\n        }\r\n    }\r\n    return output;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * @param quads Triples that should be serialised to Turtle\r\n * @internal Utility method for internal use; not part of the public API.\r\n */\r\nfunction triplesToTurtle(quads) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const format = \"text/turtle\";\r\n        const writer = new Writer({ format: format });\r\n        // Remove any potentially lingering references to Named Graphs in Quads;\r\n        // they'll be determined by the URL the Turtle will be sent to:\r\n        const triples = quads.map((quad) => DataFactory.quad(quad.subject, quad.predicate, quad.object, undefined));\r\n        writer.addQuads(triples);\r\n        const writePromise = new Promise((resolve, reject) => {\r\n            writer.end((error, result) => {\r\n                /* istanbul ignore if [n3.js doesn't actually pass an error nor a result, apparently: https://github.com/rdfjs/N3.js/blob/62682e48c02d8965b4d728cb5f2cbec6b5d1b1b8/src/N3Writer.js#L290] */\r\n                if (error) {\r\n                    return reject(error);\r\n                }\r\n                resolve(result);\r\n            });\r\n        });\r\n        const rawTurtle = yield writePromise;\r\n        return rawTurtle;\r\n    });\r\n}\r\n/**\r\n * @param raw Turtle that should be parsed into Triples\r\n * @internal Utility method for internal use; not part of the public API.\r\n */\r\nfunction turtleToTriples(raw, resourceIri) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const format = \"text/turtle\";\r\n        const parser = new Parser({ format: format, baseIRI: resourceIri });\r\n        const parsingPromise = new Promise((resolve, reject) => {\r\n            const parsedTriples = [];\r\n            parser.parse(raw, (error, triple, _prefixes) => {\r\n                if (error) {\r\n                    return reject(error);\r\n                }\r\n                if (triple) {\r\n                    parsedTriples.push(triple);\r\n                }\r\n                else {\r\n                    resolve(parsedTriples);\r\n                }\r\n            });\r\n        });\r\n        return parsingPromise;\r\n    });\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * IRIs of the XML Schema data types we support\r\n * @internal\r\n */\r\nconst xmlSchemaTypes = {\r\n    boolean: \"http://www.w3.org/2001/XMLSchema#boolean\",\r\n    dateTime: \"http://www.w3.org/2001/XMLSchema#dateTime\",\r\n    decimal: \"http://www.w3.org/2001/XMLSchema#decimal\",\r\n    integer: \"http://www.w3.org/2001/XMLSchema#integer\",\r\n    string: \"http://www.w3.org/2001/XMLSchema#string\",\r\n    langString: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\",\r\n};\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n */\r\nfunction serializeBoolean(value) {\r\n    return value ? \"1\" : \"0\";\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized boolean, or null if the given value is not a valid serialised boolean.\r\n */\r\nfunction deserializeBoolean(value) {\r\n    if (value === \"1\") {\r\n        return true;\r\n    }\r\n    else if (value === \"0\") {\r\n        return false;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n */\r\nfunction serializeDatetime(value) {\r\n    // To align with rdflib, we ignore miliseconds:\r\n    // https://github.com/linkeddata/rdflib.js/blob/d84af88f367b8b5f617c753d8241c5a2035458e8/src/literal.js#L74\r\n    const roundedDate = new Date(Date.UTC(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), 0));\r\n    // Truncate the `.000Z` at the end (i.e. the miliseconds), to plain `Z`:\r\n    const rdflibStyleString = roundedDate.toISOString().replace(/\\.000Z$/, \"Z\");\r\n    return rdflibStyleString;\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized datetime, or null if the given value is not a valid serialised datetime.\r\n */\r\nfunction deserializeDatetime(literalString) {\r\n    if (literalString === null ||\r\n        literalString.length <= 17 ||\r\n        literalString.indexOf(\"Z\") === -1) {\r\n        return null;\r\n    }\r\n    // See https://github.com/linkeddata/rdflib.js/blob/d84af88f367b8b5f617c753d8241c5a2035458e8/src/literal.js#L87\r\n    const utcFullYear = parseInt(literalString.substring(0, 4), 10);\r\n    const utcMonth = parseInt(literalString.substring(5, 7), 10) - 1;\r\n    const utcDate = parseInt(literalString.substring(8, 10), 10);\r\n    const utcHours = parseInt(literalString.substring(11, 13), 10);\r\n    const utcMinutes = parseInt(literalString.substring(14, 16), 10);\r\n    const utcSeconds = parseInt(literalString.substring(17, literalString.indexOf(\"Z\")), 10);\r\n    const date = new Date(0);\r\n    date.setUTCFullYear(utcFullYear);\r\n    date.setUTCMonth(utcMonth);\r\n    date.setUTCDate(utcDate);\r\n    date.setUTCHours(utcHours);\r\n    date.setUTCMinutes(utcMinutes);\r\n    date.setUTCSeconds(utcSeconds);\r\n    return date;\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n */\r\nfunction serializeDecimal(value) {\r\n    return value.toString();\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized decimal, or null if the given value is not a valid serialised decimal.\r\n */\r\nfunction deserializeDecimal(literalString) {\r\n    const deserialized = Number.parseFloat(literalString);\r\n    if (Number.isNaN(deserialized)) {\r\n        return null;\r\n    }\r\n    return deserialized;\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n */\r\nfunction serializeInteger(value) {\r\n    return value.toString();\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized integer, or null if the given value is not a valid serialised integer.\r\n */\r\nfunction deserializeInteger(literalString) {\r\n    const deserialized = Number.parseInt(literalString, 10);\r\n    if (Number.isNaN(deserialized)) {\r\n        return null;\r\n    }\r\n    return deserialized;\r\n}\r\n/**\r\n * @internal\r\n * @param locale Locale to transform into a consistent format.\r\n */\r\nfunction normalizeLocale(locale) {\r\n    return locale.toLowerCase();\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to raw NamedNodes.\r\n * @param value The value that might or might not be a Named Node.\r\n * @returns Whether `value` is a Named Node.\r\n */\r\nfunction isNamedNode(value) {\r\n    return (typeof value === \"object\" &&\r\n        typeof value.termType === \"string\" &&\r\n        value.termType === \"NamedNode\");\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to raw Literals.\r\n * @param value The value that might or might not be a Literal.\r\n * @returns Whether `value` is a Literal.\r\n */\r\nfunction isLiteral(value) {\r\n    return (typeof value === \"object\" &&\r\n        typeof value.termType === \"string\" &&\r\n        value.termType === \"Literal\");\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to LocalNodes.\r\n * @param value The value that might or might not be a Node with no known IRI yet.\r\n * @returns Whether `value` is a Node with no known IRI yet.\r\n */\r\nfunction isLocalNode(value) {\r\n    return (typeof value === \"object\" &&\r\n        typeof value.termType === \"string\" &&\r\n        value.termType === \"BlankNode\" &&\r\n        typeof value.internal_name === \"string\");\r\n}\r\n/**\r\n * Construct a new LocalNode.\r\n *\r\n * @internal Library users shouldn't need to be exposed to LocalNodes.\r\n * @param name Name to identify this node by.\r\n * @returns A LocalNode whose name will be resolved when it is persisted to a Pod.\r\n */\r\nfunction getLocalNode(name) {\r\n    const localNode = Object.assign(DataFactory.blankNode(), {\r\n        internal_name: name,\r\n    });\r\n    return localNode;\r\n}\r\n/**\r\n * Ensure that a given value is a Named Node.\r\n *\r\n * If the given parameter is a Named Node already, it will be returned as-is. If it is a string, it\r\n * will check whether it is a valid IRI. If not, it will throw an error; otherwise a Named Node\r\n * representing the given IRI will be returned.\r\n *\r\n * @internal Library users shouldn't need to be exposed to raw NamedNodes.\r\n * @param iri The IRI that should be converted into a Named Node, if it isn't one yet.\r\n */\r\nfunction asNamedNode(iri) {\r\n    if (isNamedNode(iri)) {\r\n        return iri;\r\n    }\r\n    // If the runtime environment supports URL, instantiate one.\r\n    // If the given IRI is not a valid URL, it will throw an error.\r\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/URL\r\n    /* istanbul ignore else [URL is available in our testing environment, so we cannot test the alternative] */\r\n    if (typeof URL !== \"undefined\") {\r\n        new URL(iri);\r\n    }\r\n    return DataFactory.namedNode(iri);\r\n}\r\n/**\r\n * Check whether two current- or potential NamedNodes are/will be equal.\r\n *\r\n * @internal Utility method; library users should not need to interact with LocalNodes directly.\r\n */\r\nfunction isEqual(node1, node2, options = {}) {\r\n    if (isNamedNode(node1) && isNamedNode(node2)) {\r\n        return node1.equals(node2);\r\n    }\r\n    if (isLocalNode(node1) && isLocalNode(node2)) {\r\n        return node1.internal_name === node2.internal_name;\r\n    }\r\n    if (typeof options.resourceIri === \"undefined\") {\r\n        // If we don't know what IRI to resolve the LocalNode to,\r\n        // we cannot conclude that it is equal to the NamedNode's full IRI:\r\n        return false;\r\n    }\r\n    const namedNode1 = isNamedNode(node1)\r\n        ? node1\r\n        : resolveIriForLocalNode(node1, options.resourceIri);\r\n    const namedNode2 = isNamedNode(node2)\r\n        ? node2\r\n        : resolveIriForLocalNode(node2, options.resourceIri);\r\n    return namedNode1.equals(namedNode2);\r\n}\r\n/**\r\n * @internal Utility method; library users should not need to interact with LocalNodes directly.\r\n * @param quad The Quad to resolve LocalNodes in.\r\n * @param resourceIri The IRI of the Resource to resolve the LocalNodes against.\r\n */\r\nfunction resolveIriForLocalNodes(quad, resourceIri) {\r\n    const subject = isLocalNode(quad.subject)\r\n        ? resolveIriForLocalNode(quad.subject, resourceIri)\r\n        : quad.subject;\r\n    const object = isLocalNode(quad.object)\r\n        ? resolveIriForLocalNode(quad.object, resourceIri)\r\n        : quad.object;\r\n    return Object.assign(Object.assign({}, quad), { subject: subject, object: object });\r\n}\r\n/**\r\n * @internal Utility method; library users should not need to interact with LocalNodes directly.\r\n * @param localNode The LocalNode to resolve to a NamedNode.\r\n * @param resourceIri The Resource in which the Node will be saved.\r\n */\r\nfunction resolveIriForLocalNode(localNode, resourceIri) {\r\n    return DataFactory.namedNode(resolveLocalIri(localNode.internal_name, resourceIri));\r\n}\r\n/**\r\n * @internal API for internal use only.\r\n * @param name The name identifying a Thing.\r\n * @param resourceIri The Resource in which the Thing can be found.\r\n */\r\nfunction resolveLocalIri(name, resourceIri) {\r\n    /* istanbul ignore if [The URL interface is available in the testing environment, so we cannot test this] */\r\n    if (typeof URL === \"undefined\") {\r\n        throw new Error(\"The URL interface is not available, so an IRI cannot be determined.\");\r\n    }\r\n    const thingIri = new URL(resourceIri);\r\n    thingIri.hash = name;\r\n    return thingIri.href;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Initialise a new [[SolidDataset]] in memory.\r\n *\r\n * @returns An empty [[SolidDataset]].\r\n */\r\nfunction createSolidDataset() {\r\n    return dataset();\r\n}\r\n/**\r\n * Fetch a SolidDataset from the given URL. Currently requires the SolidDataset to be available as [Turtle](https://www.w3.org/TR/turtle/).\r\n *\r\n * @param url URL to fetch a [[SolidDataset]] from.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Promise resolving to a [[SolidDataset]] containing the data at the given Resource, or rejecting if fetching it failed.\r\n */\r\nfunction getSolidDataset(url, options = internal_defaultFetchOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        url = internal_toIriString(url);\r\n        const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n        const response = yield config.fetch(url, {\r\n            headers: {\r\n                Accept: \"text/turtle\",\r\n            },\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`Fetching the Resource failed: ${response.status} ${response.statusText}.`);\r\n        }\r\n        const data = yield response.text();\r\n        const triples = yield turtleToTriples(data, url);\r\n        const resource = dataset();\r\n        triples.forEach((triple) => resource.add(triple));\r\n        const resourceInfo = internal_parseResourceInfo(response);\r\n        const resourceWithResourceInfo = Object.assign(resource, {\r\n            internal_resourceInfo: resourceInfo,\r\n        });\r\n        return resourceWithResourceInfo;\r\n    });\r\n}\r\n/**\r\n * Experimental: fetch a SolidDataset and its associated Access Control List.\r\n *\r\n * This is an experimental function that fetches both a Resource, the linked ACL Resource (if\r\n * available), and the ACL that applies to it if the linked ACL Resource is not available. This can\r\n * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to\r\n * provide this info in a single request. Therefore, and because this function is still\r\n * experimental, prefer [[getSolidDataset]] instead.\r\n *\r\n * If the Resource does not advertise the ACL Resource (because the authenticated user does not have\r\n * access to it), the `acl` property in the returned value will be null. `acl.resourceAcl` will be\r\n * undefined if the Resource's linked ACL Resource could not be fetched (because it does not exist),\r\n * and `acl.fallbackAcl` will be null if the applicable Container's ACL is not accessible to the\r\n * authenticated user.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and the ACLs that apply to it, if available to the authenticated user.\r\n */\r\nfunction getSolidDatasetWithAcl(url, options = internal_defaultFetchOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const solidDataset = yield getSolidDataset(url, options);\r\n        const acl = yield internal_fetchAcl(solidDataset, options);\r\n        return Object.assign(solidDataset, { internal_acl: acl });\r\n    });\r\n}\r\n/**\r\n * Given a SolidDataset, store it in a Solid Pod (overwriting the existing data at the given URL).\r\n *\r\n * @param url URL to save `solidDataset` to.\r\n * @param solidDataset The [[SolidDataset]] to save.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Promise resolving to a [[SolidDataset]] containing the stored data, or rejecting if saving it failed.\r\n */\r\nfunction saveSolidDatasetAt(url, solidDataset, options = internal_defaultFetchOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        url = internal_toIriString(url);\r\n        const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n        let requestInit;\r\n        if (isUpdate(solidDataset, url)) {\r\n            const deleteStatement = solidDataset.internal_changeLog.deletions.length > 0\r\n                ? `DELETE DATA {${(yield triplesToTurtle(solidDataset.internal_changeLog.deletions.map(getNamedNodesForLocalNodes))).trim()}};`\r\n                : \"\";\r\n            const insertStatement = solidDataset.internal_changeLog.additions.length > 0\r\n                ? `INSERT DATA {${(yield triplesToTurtle(solidDataset.internal_changeLog.additions.map(getNamedNodesForLocalNodes))).trim()}};`\r\n                : \"\";\r\n            requestInit = {\r\n                method: \"PATCH\",\r\n                body: `${deleteStatement} ${insertStatement}`,\r\n                headers: {\r\n                    \"Content-Type\": \"application/sparql-update\",\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            requestInit = {\r\n                method: \"PUT\",\r\n                body: yield triplesToTurtle(Array.from(solidDataset).map(getNamedNodesForLocalNodes)),\r\n                headers: {\r\n                    \"Content-Type\": \"text/turtle\",\r\n                    \"If-None-Match\": \"*\",\r\n                    Link: '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"',\r\n                },\r\n            };\r\n        }\r\n        const response = yield config.fetch(url, requestInit);\r\n        if (!response.ok) {\r\n            throw new Error(`Storing the Resource failed: ${response.status} ${response.statusText}.`);\r\n        }\r\n        const resourceInfo = hasResourceInfo(solidDataset)\r\n            ? Object.assign(Object.assign({}, solidDataset.internal_resourceInfo), { sourceIri: url }) : { sourceIri: url, isRawData: false };\r\n        const storedDataset = Object.assign(solidDataset, {\r\n            internal_changeLog: { additions: [], deletions: [] },\r\n            internal_resourceInfo: resourceInfo,\r\n        });\r\n        const storedDatasetWithResolvedIris = resolveLocalIrisInSolidDataset(storedDataset);\r\n        return storedDatasetWithResolvedIris;\r\n    });\r\n}\r\nfunction isUpdate(solidDataset, url) {\r\n    return (hasChangelog(solidDataset) &&\r\n        hasResourceInfo(solidDataset) &&\r\n        typeof solidDataset.internal_resourceInfo.sourceIri === \"string\" &&\r\n        solidDataset.internal_resourceInfo.sourceIri === url);\r\n}\r\n/**\r\n * Given a SolidDataset, store it in a Solid Pod in a new Resource inside a Container.\r\n *\r\n * @param containerUrl URL of the Container in which to create a new Resource.\r\n * @param solidDataset The [[SolidDataset]] to save to a new Resource in the given Container.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Promise resolving to a [[SolidDataset]] containing the stored data linked to the new Resource, or rejecting if saving it failed.\r\n */\r\nfunction saveSolidDatasetInContainer(containerUrl, solidDataset, options = internal_defaultFetchOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n        containerUrl = internal_toIriString(containerUrl);\r\n        const rawTurtle = yield triplesToTurtle(Array.from(solidDataset).map(getNamedNodesForLocalNodes));\r\n        const headers = {\r\n            \"Content-Type\": \"text/turtle\",\r\n            Link: '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"',\r\n        };\r\n        if (options.slugSuggestion) {\r\n            headers.slug = options.slugSuggestion;\r\n        }\r\n        const response = yield config.fetch(containerUrl, {\r\n            method: \"POST\",\r\n            body: rawTurtle,\r\n            headers: headers,\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`Storing the Resource in the Container failed: ${response.status} ${response.statusText}.`);\r\n        }\r\n        const locationHeader = response.headers.get(\"Location\");\r\n        if (locationHeader === null) {\r\n            throw new Error(\"Could not determine the location for the newly saved SolidDataset.\");\r\n        }\r\n        const resourceIri = new URL(locationHeader, new URL(containerUrl).origin)\r\n            .href;\r\n        const resourceInfo = {\r\n            sourceIri: resourceIri,\r\n            isRawData: false,\r\n        };\r\n        const resourceWithResourceInfo = Object.assign(solidDataset, {\r\n            internal_resourceInfo: resourceInfo,\r\n        });\r\n        const resourceWithResolvedIris = resolveLocalIrisInSolidDataset(resourceWithResourceInfo);\r\n        return resourceWithResolvedIris;\r\n    });\r\n}\r\nfunction getNamedNodesForLocalNodes(quad) {\r\n    const subject = isLocalNode(quad.subject)\r\n        ? getNamedNodeFromLocalNode(quad.subject)\r\n        : quad.subject;\r\n    const object = isLocalNode(quad.object)\r\n        ? getNamedNodeFromLocalNode(quad.object)\r\n        : quad.object;\r\n    return Object.assign(Object.assign({}, quad), { subject: subject, object: object });\r\n}\r\nfunction getNamedNodeFromLocalNode(localNode) {\r\n    return DataFactory.namedNode(\"#\" + localNode.internal_name);\r\n}\r\nfunction resolveLocalIrisInSolidDataset(solidDataset) {\r\n    const resourceIri = getSourceUrl(solidDataset);\r\n    const unresolvedQuads = Array.from(solidDataset);\r\n    unresolvedQuads.forEach((unresolvedQuad) => {\r\n        const resolvedQuad = resolveIriForLocalNodes(unresolvedQuad, resourceIri);\r\n        solidDataset.delete(unresolvedQuad);\r\n        solidDataset.add(resolvedQuad);\r\n    });\r\n    return solidDataset;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Extract Quads with a given Subject from a [[SolidDataset]] into a [[Thing]].\r\n *\r\n * @param solidDataset The [[SolidDataset]] to extract the [[Thing]] from.\r\n * @param thingUrl The URL of the desired [[Thing]].\r\n * @param options Not yet implemented.\r\n */\r\nfunction getThing(solidDataset, thingUrl, options = {}) {\r\n    const subject = isLocalNode(thingUrl) ? thingUrl : asNamedNode(thingUrl);\r\n    const scope = options.scope\r\n        ? asNamedNode(options.scope)\r\n        : null;\r\n    const thingDataset = solidDataset.match(subject, null, null, scope);\r\n    if (isLocalNode(subject)) {\r\n        const thing = Object.assign(thingDataset, {\r\n            internal_localSubject: subject,\r\n        });\r\n        return thing;\r\n    }\r\n    else {\r\n        const thing = Object.assign(thingDataset, {\r\n            internal_url: subject.value,\r\n        });\r\n        return thing;\r\n    }\r\n}\r\n/**\r\n * Get all [[Thing]]s about which a [[SolidDataset]] contains Quads.\r\n *\r\n * @param solidDataset The [[SolidDataset]] to extract the [[Thing]]s from.\r\n * @param options Not yet implemented.\r\n */\r\nfunction getThingAll(solidDataset, options = {}) {\r\n    const subjectNodes = new Array();\r\n    for (const quad of solidDataset) {\r\n        // Because NamedNode objects with the same IRI are actually different\r\n        // object instances, we have to manually check whether `subjectNodes` does\r\n        // not yet include `quadSubject` before adding it.\r\n        const quadSubject = quad.subject;\r\n        if (isNamedNode(quadSubject) &&\r\n            !subjectNodes.some((subjectNode) => isEqual(subjectNode, quadSubject))) {\r\n            subjectNodes.push(quadSubject);\r\n        }\r\n        if (isLocalNode(quadSubject) &&\r\n            !subjectNodes.some((subjectNode) => isEqual(subjectNode, quadSubject))) {\r\n            subjectNodes.push(quadSubject);\r\n        }\r\n    }\r\n    const things = subjectNodes.map((subjectNode) => getThing(solidDataset, subjectNode, options));\r\n    return things;\r\n}\r\n/**\r\n * Insert a [[Thing]] into a [[SolidDataset]], replacing previous instances of that Thing.\r\n *\r\n * @param solidDataset The SolidDataset to insert a Thing into.\r\n * @param thing The Thing to insert into the given SolidDataset.\r\n * @returns A new SolidDataset equal to the given SolidDataset, but with the given Thing.\r\n */\r\nfunction setThing(solidDataset, thing) {\r\n    const newDataset = removeThing(solidDataset, thing);\r\n    for (const quad of thing) {\r\n        newDataset.add(quad);\r\n        if (newDataset.internal_changeLog.deletions.includes(quad)) {\r\n            newDataset.internal_changeLog.deletions = newDataset.internal_changeLog.deletions.filter((deletion) => deletion !== quad);\r\n        }\r\n        else {\r\n            newDataset.internal_changeLog.additions.push(quad);\r\n        }\r\n    }\r\n    return newDataset;\r\n}\r\n/**\r\n * Remove a Thing from a SolidDataset.\r\n *\r\n * @param solidDataset The SolidDataset to remove a Thing from.\r\n * @param thing The Thing to remove from `solidDataset`.\r\n * @returns A new [[SolidDataset]] equal to the input SolidDataset, excluding the given Thing.\r\n */\r\nfunction removeThing(solidDataset, thing) {\r\n    const newSolidDataset = withChangeLog(cloneLitStructs(solidDataset));\r\n    const resourceIri = hasResourceInfo(newSolidDataset)\r\n        ? getSourceUrl(newSolidDataset)\r\n        : undefined;\r\n    const thingSubject = toNode(thing);\r\n    // Copy every Quad from the input dataset into what is to be the output dataset,\r\n    // unless its Subject is the same as that of the Thing that is to be removed:\r\n    for (const quad of solidDataset) {\r\n        if (!isNamedNode(quad.subject) && !isLocalNode(quad.subject)) {\r\n            // This data is unexpected, and hence unlikely to be added by us. Thus, leave it intact:\r\n            newSolidDataset.add(quad);\r\n        }\r\n        else if (!isEqual(thingSubject, quad.subject, { resourceIri: resourceIri })) {\r\n            newSolidDataset.add(quad);\r\n        }\r\n        else if (newSolidDataset.internal_changeLog.additions.includes(quad)) {\r\n            // If this Quad was added to the SolidDataset since it was fetched from the Pod,\r\n            // remove it from the additions rather than adding it to the deletions,\r\n            // to avoid asking the Pod to remove a Quad that does not exist there:\r\n            newSolidDataset.internal_changeLog.additions = newSolidDataset.internal_changeLog.additions.filter((addition) => addition != quad);\r\n        }\r\n        else {\r\n            newSolidDataset.internal_changeLog.deletions.push(quad);\r\n        }\r\n    }\r\n    return newSolidDataset;\r\n}\r\nfunction withChangeLog(solidDataset) {\r\n    const newSolidDataset = hasChangelog(solidDataset)\r\n        ? solidDataset\r\n        : Object.assign(solidDataset, {\r\n            internal_changeLog: { additions: [], deletions: [] },\r\n        });\r\n    return newSolidDataset;\r\n}\r\nfunction cloneLitStructs(solidDataset) {\r\n    const freshDataset = dataset();\r\n    if (hasChangelog(solidDataset)) {\r\n        freshDataset.internal_changeLog = {\r\n            additions: [...solidDataset.internal_changeLog.additions],\r\n            deletions: [...solidDataset.internal_changeLog.deletions],\r\n        };\r\n    }\r\n    if (hasResourceInfo(solidDataset)) {\r\n        freshDataset.internal_resourceInfo = Object.assign({}, solidDataset.internal_resourceInfo);\r\n    }\r\n    if (hasAcl(solidDataset)) {\r\n        freshDataset.internal_acl = Object.assign({}, solidDataset.internal_acl);\r\n    }\r\n    if (internal_isAclDataset(solidDataset)) {\r\n        freshDataset.internal_accessTo =\r\n            solidDataset.internal_accessTo;\r\n    }\r\n    return freshDataset;\r\n}\r\nfunction createThing(options = {}) {\r\n    var _a;\r\n    if (typeof options.url !== \"undefined\") {\r\n        const url = options.url;\r\n        /* istanbul ignore else [URL is defined is the testing environment, so we cannot test this] */\r\n        if (typeof URL !== \"undefined\") {\r\n            // Throws an error if the IRI is invalid:\r\n            new URL(url);\r\n        }\r\n        const thing = Object.assign(dataset(), {\r\n            internal_url: url,\r\n        });\r\n        return thing;\r\n    }\r\n    const name = (_a = options.name) !== null && _a !== void 0 ? _a : generateName();\r\n    const localSubject = getLocalNode(name);\r\n    const thing = Object.assign(dataset(), {\r\n        internal_localSubject: localSubject,\r\n    });\r\n    return thing;\r\n}\r\nfunction asUrl(thing, baseUrl) {\r\n    if (isThingLocal(thing)) {\r\n        if (typeof baseUrl === \"undefined\") {\r\n            throw new Error(\"The URL of a Thing that has not been persisted cannot be determined without a base URL.\");\r\n        }\r\n        return resolveLocalIri(thing.internal_localSubject.internal_name, baseUrl);\r\n    }\r\n    return thing.internal_url;\r\n}\r\n/** @hidden Alias of [[asUrl]] for those who prefer IRI terminology. */\r\nconst asIri = asUrl;\r\n/**\r\n * @param thing The [[Thing]] of which a URL might or might not be known.\r\n * @return Whether `thing` has no known URL yet.\r\n */\r\nfunction isThingLocal(thing) {\r\n    var _a;\r\n    return (typeof ((_a = thing.internal_localSubject) === null || _a === void 0 ? void 0 : _a.internal_name) ===\r\n        \"string\" && typeof thing.internal_url === \"undefined\");\r\n}\r\nfunction toNode(thing) {\r\n    if (isNamedNode(thing) || isLocalNode(thing)) {\r\n        return thing;\r\n    }\r\n    if (typeof thing === \"string\") {\r\n        return asNamedNode(thing);\r\n    }\r\n    if (isThingLocal(thing)) {\r\n        return thing.internal_localSubject;\r\n    }\r\n    return asNamedNode(asUrl(thing));\r\n}\r\nfunction cloneThing(thing) {\r\n    const cloned = clone(thing);\r\n    if (isThingLocal(thing)) {\r\n        cloned.internal_localSubject = thing.internal_localSubject;\r\n        return cloned;\r\n    }\r\n    cloned.internal_url = thing.internal_url;\r\n    return cloned;\r\n}\r\nfunction filterThing(thing, callback) {\r\n    const filtered = filter(thing, callback);\r\n    if (isThingLocal(thing)) {\r\n        filtered.internal_localSubject =\r\n            thing.internal_localSubject;\r\n        return filtered;\r\n    }\r\n    filtered.internal_url = thing.internal_url;\r\n    return filtered;\r\n}\r\n/**\r\n * Generate a string that can be used as the unique identifier for a Thing\r\n *\r\n * This function works by starting with a date string (so that Things can be\r\n * sorted chronologically), followed by a random number generated by taking a\r\n * random number between 0 and 1, and cutting off the `0.`.\r\n *\r\n * @internal\r\n * @returns An string that's likely to be unique\r\n */\r\nconst generateName = () => {\r\n    return (Date.now().toString() + Math.random().toString().substring(\"0.\".length));\r\n};\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * @param thing The [[Thing]] to read a URL value from.\r\n * @param property The given Property for which you want the URL value.\r\n * @returns A URL value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getUrl(thing, property) {\r\n    const namedNodeMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuad = findOne(thing, namedNodeMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object.value;\r\n}\r\n/** @hidden Alias of [[getUrl]] for those who prefer IRI terminology. */\r\nconst getIri = getUrl;\r\n/**\r\n * @param thing The [[Thing]] to read the URL values from.\r\n * @param property The given Property for which you want the URL values.\r\n * @returns The URL values for the given Property.\r\n */\r\nfunction getUrlAll(thing, property) {\r\n    const iriMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuads = findAll(thing, iriMatcher);\r\n    return matchingQuads.map((quad) => quad.object.value);\r\n}\r\n/** @hidden Alias of [[getUrlAll]] for those who prefer IRI terminology. */\r\nconst getIriAll = getUrlAll;\r\n/**\r\n * @param thing The [[Thing]] to read a boolean value from.\r\n * @param property The given Property for which you want the boolean value.\r\n * @returns A boolean value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getBoolean(thing, property) {\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.boolean);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeBoolean(literalString);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the boolean values from.\r\n * @param property The given Property for which you want the boolean values.\r\n * @returns The boolean values for the given Property.\r\n */\r\nfunction getBooleanAll(thing, property) {\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.boolean);\r\n    return literalStrings\r\n        .map(deserializeBoolean)\r\n        .filter((possibleBoolean) => possibleBoolean !== null);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a datetime value from.\r\n * @param property The given Property for which you want the datetime value.\r\n * @returns A datetime value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getDatetime(thing, property) {\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.dateTime);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeDatetime(literalString);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the datetime values from.\r\n * @param property The given Property for which you want the datetime values.\r\n * @returns The datetime values for the given Property.\r\n */\r\nfunction getDatetimeAll(thing, property) {\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.dateTime);\r\n    return literalStrings\r\n        .map(deserializeDatetime)\r\n        .filter((potentialDatetime) => potentialDatetime !== null);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a decimal value from.\r\n * @param property The given Property for which you want the decimal value.\r\n * @returns A decimal value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getDecimal(thing, property) {\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.decimal);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeDecimal(literalString);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the decimal values from.\r\n * @param property The given Property for which you want the decimal values.\r\n * @returns The decimal values for the given Property.\r\n */\r\nfunction getDecimalAll(thing, property) {\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.decimal);\r\n    return literalStrings\r\n        .map((literalString) => deserializeDecimal(literalString))\r\n        .filter((potentialDecimal) => potentialDecimal !== null);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read an integer value from.\r\n * @param property The given Property for which you want the integer value.\r\n * @returns An integer value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getInteger(thing, property) {\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.integer);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeInteger(literalString);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the integer values from.\r\n * @param property The given Property for which you want the integer values.\r\n * @returns The integer values for the given Property.\r\n */\r\nfunction getIntegerAll(thing, property) {\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.integer);\r\n    return literalStrings\r\n        .map((literalString) => deserializeInteger(literalString))\r\n        .filter((potentialInteger) => potentialInteger !== null);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a localised string value from.\r\n * @param property The given Property for which you want the localised string value.\r\n * @param locale The desired locale for the string value.\r\n * @returns A localised string value for the given Property, if present in `locale`, or null otherwise.\r\n */\r\nfunction getStringWithLocale(thing, property, locale) {\r\n    const localeStringMatcher = getLocaleStringMatcher(property, locale);\r\n    const matchingQuad = findOne(thing, localeStringMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object.value;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the localised string values from.\r\n * @param property The given Property for which you want the localised string values.\r\n * @param locale The desired locale for the string values.\r\n * @returns The localised string values for the given Property.\r\n */\r\nfunction getStringWithLocaleAll(thing, property, locale) {\r\n    const localeStringMatcher = getLocaleStringMatcher(property, locale);\r\n    const matchingQuads = findAll(thing, localeStringMatcher);\r\n    return matchingQuads.map((quad) => quad.object.value);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a string value from.\r\n * @param property The given Property for which you want the string value.\r\n * @returns A string value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getStringNoLocale(thing, property) {\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.string);\r\n    return literalString;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the string values from.\r\n * @param property The given Property for which you want the string values.\r\n * @returns The string values for the given Property.\r\n */\r\nfunction getStringNoLocaleAll(thing, property) {\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.string);\r\n    return literalStrings;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a NamedNode value from.\r\n * @param property The given Property for which you want the NamedNode value.\r\n * @returns A NamedNode value for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n */\r\nfunction getNamedNode(thing, property) {\r\n    const namedNodeMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuad = findOne(thing, namedNodeMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the NamedNode values from.\r\n * @param property The given Property for which you want the NamedNode values.\r\n * @returns The NamedNode values for the given Property.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n */\r\nfunction getNamedNodeAll(thing, property) {\r\n    const namedNodeMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuads = findAll(thing, namedNodeMatcher);\r\n    return matchingQuads.map((quad) => quad.object);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a Literal value from.\r\n * @param property The given Property for which you want the Literal value.\r\n * @returns A Literal value for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n */\r\nfunction getLiteral(thing, property) {\r\n    const literalMatcher = getLiteralMatcher(property);\r\n    const matchingQuad = findOne(thing, literalMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the Literal values from.\r\n * @param property The given Property for which you want the Literal values.\r\n * @returns The Literal values for the given Property.\r\n * @ignore This should not be needed due to the other get*All() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n */\r\nfunction getLiteralAll(thing, property) {\r\n    const literalMatcher = getLiteralMatcher(property);\r\n    const matchingQuads = findAll(thing, literalMatcher);\r\n    return matchingQuads.map((quad) => quad.object);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to extract a Quad from.\r\n * @param matcher Callback function that returns a boolean indicating whether a given Quad should be included.\r\n * @returns First Quad in `thing` for which `matcher` returned true.\r\n */\r\nfunction findOne(thing, matcher) {\r\n    for (const quad of thing) {\r\n        if (matcher(quad)) {\r\n            return quad;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to extract Quads from.\r\n * @param matcher Callback function that returns a boolean indicating whether a given Quad should be included.\r\n * @returns All Quads in `thing` for which `matcher` returned true.\r\n */\r\nfunction findAll(thing, matcher) {\r\n    const matched = [];\r\n    for (const quad of thing) {\r\n        if (matcher(quad)) {\r\n            matched.push(quad);\r\n        }\r\n    }\r\n    return matched;\r\n}\r\nfunction getNamedNodeMatcher(property) {\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return predicateNode.equals(quad.predicate) && isNamedNode(quad.object);\r\n    };\r\n    return matcher;\r\n}\r\nfunction getLiteralMatcher(property) {\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return predicateNode.equals(quad.predicate) && isLiteral(quad.object);\r\n    };\r\n    return matcher;\r\n}\r\nfunction getLiteralOfTypeMatcher(property, datatype) {\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return (predicateNode.equals(quad.predicate) &&\r\n            isLiteral(quad.object) &&\r\n            quad.object.datatype.value === datatype);\r\n    };\r\n    return matcher;\r\n}\r\nfunction getLocaleStringMatcher(property, locale) {\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return (predicateNode.equals(quad.predicate) &&\r\n            isLiteral(quad.object) &&\r\n            quad.object.datatype.value === xmlSchemaTypes.langString &&\r\n            quad.object.language.toLowerCase() === locale.toLowerCase());\r\n    };\r\n    return matcher;\r\n}\r\n/**\r\n * @param thing The [Thing]] to read a Literal of the given type from.\r\n * @param property The given Property for which you want the Literal value.\r\n * @param literalType Set type of the Literal data.\r\n * @returns The stringified value for the given Property and type, if present, or null otherwise.\r\n */\r\nfunction getLiteralOfType(thing, property, literalType) {\r\n    const literalOfTypeMatcher = getLiteralOfTypeMatcher(property, literalType);\r\n    const matchingQuad = findOne(thing, literalOfTypeMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object.value;\r\n}\r\n/**\r\n * @param thing The [Thing]] to read the Literals of the given type from.\r\n * @param property The given Property for which you want the Literal values.\r\n * @param literalType Set type of the Literal data.\r\n * @returns The stringified values for the given Property and type.\r\n */\r\nfunction getLiteralAllOfType(thing, property, literalType) {\r\n    const literalOfTypeMatcher = getLiteralOfTypeMatcher(property, literalType);\r\n    const matchingQuads = findAll(thing, literalOfTypeMatcher);\r\n    return matchingQuads.map((quad) => quad.object.value);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nfunction removeAll(thing, property) {\r\n    const predicateNode = asNamedNode(property);\r\n    const updatedThing = filterThing(thing, (quad) => !quad.predicate.equals(predicateNode));\r\n    return updatedThing;\r\n}\r\n/**\r\n * Create a new Thing with the given URL removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a URL value from.\r\n * @param property Property for which to remove the given URL value.\r\n * @param value URL to remove from `thing` for the given `Property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeUrl = (thing, property, value) => {\r\n    const predicateNode = asNamedNode(property);\r\n    const iriNode = isNamedNode(value)\r\n        ? value\r\n        : typeof value === \"string\"\r\n            ? asNamedNode(value)\r\n            : asNamedNode(asIri(value));\r\n    const updatedThing = filterThing(thing, (quad) => {\r\n        return (!quad.predicate.equals(predicateNode) ||\r\n            !isNamedNode(quad.object) ||\r\n            !quad.object.equals(iriNode));\r\n    });\r\n    return updatedThing;\r\n};\r\n/** @hidden Alias of [[removeUrl]] for those who prefer IRI terminology. */\r\nconst removeIri = removeUrl;\r\n/**\r\n * Create a new Thing with the given boolean removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a boolean value from.\r\n * @param property Property for which to remove the given boolean value.\r\n * @param value Boolean to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeBoolean = (thing, property, value) => {\r\n    return removeLiteralOfType(thing, property, serializeBoolean(value), xmlSchemaTypes.boolean);\r\n};\r\n/**\r\n * Create a new Thing with the given datetime removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a datetime value from.\r\n * @param property Property for which to remove the given datetime value.\r\n * @param value Datetime to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeDatetime = (thing, property, value) => {\r\n    return removeLiteralOfType(thing, property, serializeDatetime(value), xmlSchemaTypes.dateTime);\r\n};\r\n/**\r\n * Create a new Thing with the given decimal removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a decimal value from.\r\n * @param property Property for which to remove the given decimal value.\r\n * @param value Decimal to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeDecimal = (thing, property, value) => {\r\n    return removeLiteralOfType(thing, property, serializeDecimal(value), xmlSchemaTypes.decimal);\r\n};\r\n/**\r\n * Create a new Thing with the given integer removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove an integer value from.\r\n * @param property Property for which to remove the given integer value.\r\n * @param value Integer to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeInteger = (thing, property, value) => {\r\n    return removeLiteralOfType(thing, property, serializeInteger(value), xmlSchemaTypes.integer);\r\n};\r\nfunction removeStringWithLocale(thing, property, value, locale) {\r\n    // Note: Due to how the `DataFactory.literal` constructor behaves, this function\r\n    // must call directly `removeLiteral` directly, with the locale as the data\r\n    // type of the Literal (which is not a valid NamedNode).\r\n    return removeLiteral(thing, property, DataFactory.literal(value, normalizeLocale(locale)));\r\n}\r\n/**\r\n * Create a new Thing with the given unlocalised string removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove an unlocalised string value from.\r\n * @param property Property for which to remove the given string value.\r\n * @param value String to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeStringNoLocale = (thing, property, value) => {\r\n    return removeLiteralOfType(thing, property, value, xmlSchemaTypes.string);\r\n};\r\nfunction removeNamedNode(thing, property, value) {\r\n    const predicateNode = asNamedNode(property);\r\n    const updatedThing = filterThing(thing, (quad) => {\r\n        return (!quad.predicate.equals(predicateNode) ||\r\n            !isNamedNode(quad.object) ||\r\n            !quad.object.equals(value));\r\n    });\r\n    return updatedThing;\r\n}\r\nfunction removeLiteral(thing, property, value) {\r\n    const predicateNode = asNamedNode(property);\r\n    const updatedThing = filterThing(thing, (quad) => {\r\n        return (!quad.predicate.equals(predicateNode) ||\r\n            !isLiteral(quad.object) ||\r\n            !quad.object.equals(value));\r\n    });\r\n    return updatedThing;\r\n}\r\nfunction removeLiteralOfType(thing, property, value, type) {\r\n    const updatedThing = removeLiteral(thing, property, DataFactory.literal(value, DataFactory.namedNode(type)));\r\n    return updatedThing;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Create a new Thing with existing values replaced by the given URL for the given Property.\r\n *\r\n * To preserve existing values, see [[addUrl]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a URL value on.\r\n * @param property Property for which to set the given URL value.\r\n * @param url URL to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setUrl = (thing, property, url) => {\r\n    const newThing = removeAll(thing, property);\r\n    const predicateNode = asNamedNode(property);\r\n    newThing.add(DataFactory.quad(toNode(newThing), predicateNode, toNode(url)));\r\n    return newThing;\r\n};\r\n/** @hidden Alias of [[setUrl]] for those who prefer IRI terminology. */\r\nconst setIri = setUrl;\r\n/**\r\n * Create a new Thing with existing values replaced by the given boolean for the given Property.\r\n *\r\n * To preserve existing values, see [[addBoolean]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a boolean value on.\r\n * @param property Property for which to set the given boolean value.\r\n * @param value Boolean to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setBoolean = (thing, property, value) => {\r\n    return setLiteralOfType(thing, property, serializeBoolean(value), xmlSchemaTypes.boolean);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given datetime for the given Property.\r\n *\r\n * To preserve existing values, see [[addDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an datetime value on.\r\n * @param property Property for which to set the given datetime value.\r\n * @param value Datetime to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setDatetime = (thing, property, value) => {\r\n    return setLiteralOfType(thing, property, serializeDatetime(value), xmlSchemaTypes.dateTime);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given decimal for the given Property.\r\n *\r\n * To preserve existing values, see [[addDecimal]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a decimal value on.\r\n * @param property Property for which to set the given decimal value.\r\n * @param value Decimal to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setDecimal = (thing, property, value) => {\r\n    return setLiteralOfType(thing, property, serializeDecimal(value), xmlSchemaTypes.decimal);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given integer for the given Property.\r\n *\r\n * To preserve existing values, see [[addInteger]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an integer value on.\r\n * @param property Property for which to set the given integer value.\r\n * @param value Integer to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setInteger = (thing, property, value) => {\r\n    return setLiteralOfType(thing, property, serializeInteger(value), xmlSchemaTypes.integer);\r\n};\r\nfunction setStringWithLocale(thing, property, value, locale) {\r\n    const literal = DataFactory.literal(value, normalizeLocale(locale));\r\n    return setLiteral(thing, property, literal);\r\n}\r\n/**\r\n * Create a new Thing with existing values replaced by the given unlocalised string for the given Property.\r\n *\r\n * To preserve existing values, see [[addStringNoLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an unlocalised string value on.\r\n * @param property Property for which to set the given unlocalised string value.\r\n * @param value Unlocalised string to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setStringNoLocale = (thing, property, value) => {\r\n    return setLiteralOfType(thing, property, value, xmlSchemaTypes.string);\r\n};\r\nfunction setNamedNode(thing, property, value) {\r\n    const newThing = removeAll(thing, property);\r\n    const predicateNode = asNamedNode(property);\r\n    newThing.add(DataFactory.quad(toNode(newThing), predicateNode, value));\r\n    return newThing;\r\n}\r\nfunction setLiteral(thing, property, value) {\r\n    const newThing = removeAll(thing, property);\r\n    const predicateNode = asNamedNode(property);\r\n    newThing.add(DataFactory.quad(toNode(newThing), predicateNode, value));\r\n    return newThing;\r\n}\r\nfunction setLiteralOfType(thing, property, value, type) {\r\n    const literal = DataFactory.literal(value, type);\r\n    return setLiteral(thing, property, literal);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @internal */\r\nfunction internal_fetchResourceAcl(dataset, options = internal_defaultFetchOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!hasAccessibleAcl(dataset)) {\r\n            return null;\r\n        }\r\n        try {\r\n            const aclSolidDataset = yield getSolidDataset(dataset.internal_resourceInfo.aclUrl, options);\r\n            return Object.assign(aclSolidDataset, {\r\n                internal_accessTo: getSourceUrl(dataset),\r\n            });\r\n        }\r\n        catch (e) {\r\n            // Since a Solid server adds a `Link` header to an ACL even if that ACL does not exist,\r\n            // failure to fetch the ACL is expected to happen - we just return `null` and let callers deal\r\n            // with it.\r\n            return null;\r\n        }\r\n    });\r\n}\r\n/** @internal */\r\nfunction internal_fetchFallbackAcl(resource, options = internal_defaultFetchOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const resourceUrl = new URL(getSourceUrl(resource));\r\n        const resourcePath = resourceUrl.pathname;\r\n        // Note: we're currently assuming that the Origin is the root of the Pod. However, it is not yet\r\n        //       set in stone that that will always be the case. We might need to check the Container's\r\n        //       metadata at some point in time to check whether it is actually the root of the Pod.\r\n        //       See: https://github.com/solid/specification/issues/153#issuecomment-624630022\r\n        if (resourcePath === \"/\") {\r\n            // We're already at the root, so there's no Container we can retrieve:\r\n            return null;\r\n        }\r\n        const containerPath = getContainerPath(resourcePath);\r\n        const containerIri = new URL(containerPath, resourceUrl.origin).href;\r\n        const containerInfo = {\r\n            internal_resourceInfo: yield internal_fetchResourceInfo(containerIri, options),\r\n        };\r\n        if (!hasAccessibleAcl(containerInfo)) {\r\n            // If the current user does not have access to this Container's ACL,\r\n            // we cannot determine whether its ACL is the one that applies. Thus, return null:\r\n            return null;\r\n        }\r\n        const containerAcl = yield internal_fetchResourceAcl(containerInfo, options);\r\n        if (containerAcl === null) {\r\n            return internal_fetchFallbackAcl(containerInfo, options);\r\n        }\r\n        return containerAcl;\r\n    });\r\n}\r\nfunction getContainerPath(resourcePath) {\r\n    const resourcePathWithoutTrailingSlash = resourcePath.substring(resourcePath.length - 1) === \"/\"\r\n        ? resourcePath.substring(0, resourcePath.length - 1)\r\n        : resourcePath;\r\n    const containerPath = resourcePath.substring(0, resourcePathWithoutTrailingSlash.lastIndexOf(\"/\")) + \"/\";\r\n    return containerPath;\r\n}\r\n/**\r\n * Verify whether an ACL was found for the given Resource.\r\n *\r\n * A Resource fetched with its ACL (e.g. using [[getSolidDatasetWithAcl]]) _might_ have a resource ACL attached, but\r\n * we cannot be sure: it might be that none exists for this specific Resource (in which case the\r\n * fallback ACL applies), or the currently authenticated user (if any) might not have Control access\r\n * to the fetched Resource.\r\n *\r\n * This function verifies that the Resource's ACL is accessible.\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param resource A Resource that might have an ACL attached.\r\n * @returns Whether `dataset` has an ACL attached.\r\n */\r\nfunction hasResourceAcl(resource) {\r\n    return (resource.internal_acl.resourceAcl !== null &&\r\n        getSourceUrl(resource) ===\r\n            resource.internal_acl.resourceAcl.internal_accessTo &&\r\n        resource.internal_resourceInfo.aclUrl ===\r\n            getSourceUrl(resource.internal_acl.resourceAcl));\r\n}\r\nfunction getResourceAcl(resource) {\r\n    if (!hasResourceAcl(resource)) {\r\n        return null;\r\n    }\r\n    return resource.internal_acl.resourceAcl;\r\n}\r\n/**\r\n * Verify whether a fallback ACL was found for the given Resource.\r\n *\r\n * A Resource fetched with its ACL (e.g. using [[getSolidDatasetWithAcl]]) _might_ have a fallback ACL\r\n * attached, but we cannot be sure: the currently authenticated user (if any) might not have Control\r\n * access to one of the fetched Resource's Containers.\r\n *\r\n * This function verifies that the fallback ACL is accessible.\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param resource A [[SolidDataset]] that might have a fallback ACL attached.\r\n * @returns Whether `dataset` has a fallback ACL attached.\r\n */\r\nfunction hasFallbackAcl(resource) {\r\n    return resource.internal_acl.fallbackAcl !== null;\r\n}\r\nfunction getFallbackAcl(dataset) {\r\n    if (!hasFallbackAcl(dataset)) {\r\n        return null;\r\n    }\r\n    return dataset.internal_acl.fallbackAcl;\r\n}\r\n/**\r\n * Initialise an empty Resource ACL for a given Resource.\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param targetResource A Resource that does not have its own ACL yet (see [[hasResourceAcl]]).\r\n * @returns A Resource ACL for the given Resource, with no ACL Rules defined yet.\r\n */\r\nfunction createAcl(targetResource) {\r\n    const emptyResourceAcl = Object.assign(dataset(), {\r\n        internal_accessTo: getSourceUrl(targetResource),\r\n        internal_resourceInfo: {\r\n            sourceIri: targetResource.internal_resourceInfo.aclUrl,\r\n            isRawData: false,\r\n        },\r\n    });\r\n    return emptyResourceAcl;\r\n}\r\n/**\r\n * Create a Resource ACL for a given Resource, setting the same access permissions that currently apply to it from its Container.\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param resource A Resource that does not have its own ACL (see [[hasResourceAcl]]) and a known fallback ACL (see [[hasFallbackAcl]]).\r\n * @returns A Resource ACL for the given Resource, with the default ACL Rules from the fallback ACL applied as Resource Rules.\r\n */\r\nfunction createAclFromFallbackAcl(resource) {\r\n    const emptyResourceAcl = createAcl(resource);\r\n    const fallbackAclRules = internal_getAclRules(resource.internal_acl.fallbackAcl);\r\n    const defaultAclRules = internal_getDefaultAclRulesForResource(fallbackAclRules, resource.internal_acl.fallbackAcl.internal_accessTo);\r\n    const resourceAclRules = defaultAclRules.map((rule) => {\r\n        rule = removeAll(rule, acl.default);\r\n        rule = setIri(rule, acl.accessTo, getSourceUrl(resource));\r\n        return rule;\r\n    });\r\n    // Iterate over every ACL Rule we want to import, inserting them into `emptyResourceAcl` one by one:\r\n    const initialisedResourceAcl = resourceAclRules.reduce(setThing, emptyResourceAcl);\r\n    return initialisedResourceAcl;\r\n}\r\n/** @internal */\r\nfunction internal_isAclDataset(dataset) {\r\n    return typeof dataset.internal_accessTo === \"string\";\r\n}\r\n/** @internal */\r\nfunction internal_getAclRules(aclDataset) {\r\n    const things = getThingAll(aclDataset);\r\n    return things.filter(isAclRule);\r\n}\r\nfunction isAclRule(thing) {\r\n    return getIriAll(thing, rdf.type).includes(acl.Authorization);\r\n}\r\n/** @internal */\r\nfunction internal_getResourceAclRulesForResource(aclRules, resource) {\r\n    return aclRules.filter((rule) => appliesToResource(rule, resource));\r\n}\r\nfunction appliesToResource(aclRule, resource) {\r\n    return getIriAll(aclRule, acl.accessTo).includes(resource);\r\n}\r\n/** @internal */\r\nfunction internal_getDefaultAclRulesForResource(aclRules, resource) {\r\n    return aclRules.filter((rule) => isDefaultForResource(rule, resource));\r\n}\r\nfunction isDefaultForResource(aclRule, resource) {\r\n    return getIriAll(aclRule, acl.default).includes(resource);\r\n}\r\n/** @internal */\r\nfunction internal_getAccess(rule) {\r\n    const ruleAccessModes = getIriAll(rule, acl.mode);\r\n    const writeAccess = ruleAccessModes.includes(internal_accessModeIriStrings.write);\r\n    return writeAccess\r\n        ? {\r\n            read: ruleAccessModes.includes(internal_accessModeIriStrings.read),\r\n            append: true,\r\n            write: true,\r\n            control: ruleAccessModes.includes(internal_accessModeIriStrings.control),\r\n        }\r\n        : {\r\n            read: ruleAccessModes.includes(internal_accessModeIriStrings.read),\r\n            append: ruleAccessModes.includes(internal_accessModeIriStrings.append),\r\n            write: false,\r\n            control: ruleAccessModes.includes(internal_accessModeIriStrings.control),\r\n        };\r\n}\r\n/** @internal */\r\nfunction internal_combineAccessModes(modes) {\r\n    return modes.reduce((accumulator, current) => {\r\n        const writeAccess = accumulator.write || current.write;\r\n        return writeAccess\r\n            ? {\r\n                read: accumulator.read || current.read,\r\n                append: true,\r\n                write: true,\r\n                control: accumulator.control || current.control,\r\n            }\r\n            : {\r\n                read: accumulator.read || current.read,\r\n                append: accumulator.append || current.append,\r\n                write: false,\r\n                control: accumulator.control || current.control,\r\n            };\r\n    }, { read: false, append: false, write: false, control: false });\r\n}\r\n/** @internal */\r\nfunction internal_removeEmptyAclRules(aclDataset) {\r\n    const aclRules = internal_getAclRules(aclDataset);\r\n    const aclRulesToRemove = aclRules.filter(isEmptyAclRule);\r\n    // Is this too clever? It iterates over aclRulesToRemove, one by one removing them from aclDataset.\r\n    const updatedAclDataset = aclRulesToRemove.reduce(removeThing, aclDataset);\r\n    return updatedAclDataset;\r\n}\r\nfunction isEmptyAclRule(aclRule) {\r\n    // If there are Quads in there unrelated to Access Control,\r\n    // this is not an empty ACL rule that can be deleted:\r\n    if (Array.from(aclRule).some((quad) => !isAclQuad(quad))) {\r\n        return false;\r\n    }\r\n    // If the rule does not apply to any Resource, it is no longer working:\r\n    if (getIri(aclRule, acl.accessTo) === null &&\r\n        getIri(aclRule, acl.default) === null) {\r\n        return true;\r\n    }\r\n    // If the rule does not specify Access Modes, it is no longer working:\r\n    if (getIri(aclRule, acl.mode) === null) {\r\n        return true;\r\n    }\r\n    // If the rule does not specify whom it applies to, it is no longer working:\r\n    if (getIri(aclRule, acl.agent) === null &&\r\n        getIri(aclRule, acl.agentGroup) === null &&\r\n        getIri(aclRule, acl.agentClass) === null) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isAclQuad(quad) {\r\n    const predicate = quad.predicate;\r\n    const object = quad.object;\r\n    if (predicate.equals(DataFactory.namedNode(rdf.type)) &&\r\n        object.equals(DataFactory.namedNode(acl.Authorization))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.accessTo)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.default))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.mode)) &&\r\n        Object.values(internal_accessModeIriStrings).some((mode) => object.equals(DataFactory.namedNode(mode)))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.agent)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.agentGroup)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.agentClass))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.origin))) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * IRIs of potential Access Modes\r\n * @internal\r\n */\r\nconst internal_accessModeIriStrings = {\r\n    read: \"http://www.w3.org/ns/auth/acl#Read\",\r\n    append: \"http://www.w3.org/ns/auth/acl#Append\",\r\n    write: \"http://www.w3.org/ns/auth/acl#Write\",\r\n    control: \"http://www.w3.org/ns/auth/acl#Control\",\r\n};\r\n/** @internal\r\n * This function finds, among a set of ACL rules, the ones granting access to a given entity (the target)\r\n * and identifying it with a specific property (`acl:agent` or `acl:agentGroup`).\r\n * @param aclRules The set of rules to filter\r\n * @param targetIri The IRI of the target\r\n * @param targetType The property linking the rule to the target\r\n */\r\nfunction internal_getAclRulesForIri(aclRules, targetIri, targetType) {\r\n    return aclRules.filter((rule) => getIriAll(rule, targetType).includes(targetIri));\r\n}\r\n/** @internal\r\n * This function transforms a given set of rules into a map associating the IRIs\r\n * of the entities to which permissions are granted by these rules, and the permissions\r\n * granted to them. Additionally, it filters these entities based on the predicate\r\n * that refers to them in the rule.\r\n */\r\nfunction internal_getAccessByIri(aclRules, targetType) {\r\n    const targetIriAccess = {};\r\n    aclRules.forEach((rule) => {\r\n        const ruleTargetIri = getIriAll(rule, targetType);\r\n        const access = internal_getAccess(rule);\r\n        // A rule might apply to multiple agents. If multiple rules apply to the same agent, the Access\r\n        // Modes granted by those rules should be combined:\r\n        ruleTargetIri.forEach((targetIri) => {\r\n            targetIriAccess[targetIri] =\r\n                typeof targetIriAccess[targetIri] === \"undefined\"\r\n                    ? access\r\n                    : internal_combineAccessModes([targetIriAccess[targetIri], access]);\r\n        });\r\n    });\r\n    return targetIriAccess;\r\n}\r\n/**\r\n * Save the ACL for a Resource.\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param resource The Resource to which the given ACL applies.\r\n * @param resourceAcl An [[AclDataset]] whose ACL Rules will apply to `resource`.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\r\nfunction saveAclFor(resource, resourceAcl, options = internal_defaultFetchOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const savedDataset = yield saveSolidDatasetAt(resource.internal_resourceInfo.aclUrl, resourceAcl, options);\r\n        const savedAclDataset = Object.assign(savedDataset, {\r\n            internal_accessTo: getSourceUrl(resource),\r\n        });\r\n        return savedAclDataset;\r\n    });\r\n}\r\n/**\r\n * Remove the ACL of a Resource.\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param resource The Resource for which you want to delete the Access Control List Resource.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\r\nfunction deleteAclFor(resource, options = internal_defaultFetchOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n        const response = yield config.fetch(resource.internal_resourceInfo.aclUrl, {\r\n            method: \"DELETE\",\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`Deleting the ACL failed: ${response.status} ${response.statusText}.`);\r\n        }\r\n        const storedResource = Object.assign(resource, {\r\n            acl: {\r\n                resourceAcl: null,\r\n            },\r\n        });\r\n        return storedResource;\r\n    });\r\n}\r\n/**\r\n * Initialise a new ACL Rule that grants some access - but does not yet specify to whom.\r\n *\r\n * @hidden This is an internal utility function that should not be used directly by downstreams.\r\n * @param access Access mode that this Rule will grant\r\n */\r\nfunction internal_initialiseAclRule(access) {\r\n    let newRule = createThing();\r\n    newRule = setIri(newRule, rdf.type, acl.Authorization);\r\n    if (access.read) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.read);\r\n    }\r\n    if (access.append && !access.write) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.append);\r\n    }\r\n    if (access.write) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.write);\r\n    }\r\n    if (access.control) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.control);\r\n    }\r\n    return newRule;\r\n}\r\n/**\r\n * Create a new ACL Rule with the same ACL values as the input ACL Rule, but having a different IRI.\r\n *\r\n * Note that non-ACL values will not be copied over.\r\n *\r\n * @hidden This is an internal utility function that should not be used directly by downstreams.\r\n * @param sourceRule ACL rule to duplicate.\r\n */\r\nfunction internal_duplicateAclRule(sourceRule) {\r\n    let targetRule = createThing();\r\n    targetRule = setIri(targetRule, rdf.type, acl.Authorization);\r\n    function copyIris(inputRule, outputRule, predicate) {\r\n        return getIriAll(inputRule, predicate).reduce((outputRule, iriTarget) => addIri(outputRule, predicate, iriTarget), outputRule);\r\n    }\r\n    targetRule = copyIris(sourceRule, targetRule, acl.accessTo);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.default);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agent);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agentGroup);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agentClass);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.origin);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.mode);\r\n    return targetRule;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @internal */\r\nconst internal_defaultFetchOptions = {\r\n    fetch: fetch,\r\n};\r\n/**\r\n * Retrieve the information about a resource (e.g. access permissions) without\r\n * fetching the resource itself.\r\n *\r\n * @param url URL to fetch Resource metadata from.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).\r\n * @returns Promise resolving to the metadata describing the given Resource, or rejecting if fetching it failed.\r\n */\r\nfunction internal_fetchResourceInfo(url, options = internal_defaultFetchOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n        const response = yield config.fetch(url, { method: \"HEAD\" });\r\n        if (!response.ok) {\r\n            throw new Error(`Fetching the Resource metadata failed: ${response.status} ${response.statusText}.`);\r\n        }\r\n        const resourceInfo = internal_parseResourceInfo(response);\r\n        return resourceInfo;\r\n    });\r\n}\r\n/**\r\n * This (currently internal) function fetches the ACL indicated in the [[WithResourceInfo]]\r\n * attached to a resource.\r\n *\r\n * @internal\r\n * @param resourceInfo The Resource info with the ACL URL\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).\r\n */\r\nfunction internal_fetchAcl(resourceInfo, options = internal_defaultFetchOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!hasAccessibleAcl(resourceInfo)) {\r\n            return {\r\n                resourceAcl: null,\r\n                fallbackAcl: null,\r\n            };\r\n        }\r\n        const [resourceAcl, fallbackAcl] = yield Promise.all([\r\n            internal_fetchResourceAcl(resourceInfo, options),\r\n            internal_fetchFallbackAcl(resourceInfo, options),\r\n        ]);\r\n        return {\r\n            fallbackAcl: fallbackAcl,\r\n            resourceAcl: resourceAcl,\r\n        };\r\n    });\r\n}\r\n/**\r\n * Experimental: fetch a Resource's metadata and its associated Access Control List.\r\n *\r\n * This is an experimental function that fetches both a Resource's metadata, the linked ACL Resource (if\r\n * available), and the ACL that applies to it if the linked ACL Resource is not available (if accessible). This can\r\n * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to\r\n * provide this info in a single request.\r\n *\r\n * If the Resource's linked ACL Resource could not be fetched (because it does not exist, or because\r\n * the authenticated user does not have access to it), `acl.resourceAcl` will be `null`. If the\r\n * applicable Container's ACL is not accessible to the authenticated user, `acl.fallbackAcl` will be\r\n * `null`.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Resource's metadata and the ACLs that apply to the Resource, if available to the authenticated user.\r\n */\r\nfunction fetchResourceInfoWithAcl(url, options = internal_defaultFetchOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const resourceInfo = yield internal_fetchResourceInfo(url, options);\r\n        const acl = yield internal_fetchAcl({ internal_resourceInfo: resourceInfo }, options);\r\n        return Object.assign({ internal_resourceInfo: resourceInfo }, { internal_acl: acl });\r\n    });\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction internal_parseResourceInfo(response) {\r\n    var _a, _b, _c;\r\n    const contentTypeParts = (_b = (_a = response.headers.get(\"Content-Type\")) === null || _a === void 0 ? void 0 : _a.split(\";\")) !== null && _b !== void 0 ? _b : [];\r\n    // If the server offers a Turtle or JSON-LD serialisation on its own accord,\r\n    // that tells us whether it is RDF data that the server can understand\r\n    // (and hence can be updated with a PATCH request with SPARQL INSERT and DELETE statements),\r\n    // in which case our SolidDataset-related functions should handle it.\r\n    // For more context, see https://github.com/inrupt/solid-client-js/pull/214.\r\n    const isSolidDataset = contentTypeParts.length > 0 &&\r\n        [\"text/turtle\", \"application/ld+json\"].includes(contentTypeParts[0]);\r\n    const resourceInfo = {\r\n        sourceIri: response.url,\r\n        isRawData: !isSolidDataset,\r\n        contentType: (_c = response.headers.get(\"Content-Type\")) !== null && _c !== void 0 ? _c : undefined,\r\n    };\r\n    const linkHeader = response.headers.get(\"Link\");\r\n    if (linkHeader) {\r\n        const parsedLinks = LinkHeader.parse(linkHeader);\r\n        // Set ACL link\r\n        const aclLinks = parsedLinks.get(\"rel\", \"acl\");\r\n        if (aclLinks.length === 1) {\r\n            resourceInfo.aclUrl = new URL(aclLinks[0].uri, resourceInfo.sourceIri).href;\r\n        }\r\n    }\r\n    const wacAllowHeader = response.headers.get(\"WAC-Allow\");\r\n    if (wacAllowHeader) {\r\n        resourceInfo.permissions = parseWacAllowHeader(wacAllowHeader);\r\n    }\r\n    return resourceInfo;\r\n}\r\n/**\r\n * @param resource Resource for which to check whether it is a Container.\r\n * @returns Whether `resource` is a Container.\r\n */\r\nfunction isContainer(resource) {\r\n    return getSourceUrl(resource).endsWith(\"/\");\r\n}\r\n/**\r\n * This function will tell you whether a given Resource contains raw data, or a SolidDataset.\r\n *\r\n * @param resource Resource for which to check whether it contains raw data.\r\n * @return Whether `resource` contains raw data.\r\n */\r\nfunction isRawData(resource) {\r\n    return resource.internal_resourceInfo.isRawData;\r\n}\r\n/**\r\n * @param resource Resource for which to determine the Content Type.\r\n * @returns The Content Type, if known, or null if not known.\r\n */\r\nfunction getContentType(resource) {\r\n    var _a;\r\n    return (_a = resource.internal_resourceInfo.contentType) !== null && _a !== void 0 ? _a : null;\r\n}\r\n/**\r\n * @param resource\r\n * @returns The URL from which the resource has been fetched\r\n */\r\nfunction getSourceUrl(resource) {\r\n    return resource.internal_resourceInfo.sourceIri;\r\n}\r\n/** @hidden Alias of getSourceUrl for those who prefer to use IRI terminology. */\r\nconst getSourceIri = getSourceUrl;\r\n/**\r\n * Parse a WAC-Allow header into user and public access booleans.\r\n *\r\n * @param wacAllowHeader A WAC-Allow header in the format `user=\"read append write control\",public=\"read\"`\r\n * @see https://github.com/solid/solid-spec/blob/cb1373a369398d561b909009bd0e5a8c3fec953b/api-rest.md#wac-allow-headers\r\n */\r\nfunction parseWacAllowHeader(wacAllowHeader) {\r\n    function parsePermissionStatement(permissionStatement) {\r\n        const permissions = permissionStatement.split(\" \");\r\n        const writePermission = permissions.includes(\"write\");\r\n        return writePermission\r\n            ? {\r\n                read: permissions.includes(\"read\"),\r\n                append: true,\r\n                write: true,\r\n                control: permissions.includes(\"control\"),\r\n            }\r\n            : {\r\n                read: permissions.includes(\"read\"),\r\n                append: permissions.includes(\"append\"),\r\n                write: false,\r\n                control: permissions.includes(\"control\"),\r\n            };\r\n    }\r\n    function getStatementFor(header, scope) {\r\n        const relevantEntries = header\r\n            .split(\",\")\r\n            .map((rawEntry) => rawEntry.split(\"=\"))\r\n            .filter((parts) => parts.length === 2 && parts[0].trim() === scope);\r\n        // There should only be one statement with the given scope:\r\n        if (relevantEntries.length !== 1) {\r\n            return \"\";\r\n        }\r\n        const relevantStatement = relevantEntries[0][1].trim();\r\n        // The given statement should be wrapped in double quotes to be valid:\r\n        if (relevantStatement.charAt(0) !== '\"' ||\r\n            relevantStatement.charAt(relevantStatement.length - 1) !== '\"') {\r\n            return \"\";\r\n        }\r\n        // Return the statment without the wrapping quotes, e.g.: read append write control\r\n        return relevantStatement.substring(1, relevantStatement.length - 1);\r\n    }\r\n    return {\r\n        user: parsePermissionStatement(getStatementFor(wacAllowHeader, \"user\")),\r\n        public: parsePermissionStatement(getStatementFor(wacAllowHeader, \"public\")),\r\n    };\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nconst defaultGetFileOptions = {\r\n    fetch: fetch,\r\n};\r\nconst RESERVED_HEADERS = [\"Slug\", \"If-None-Match\", \"Content-Type\"];\r\n/**\r\n * Some of the headers must be set by the library, rather than directly.\r\n */\r\nfunction containsReserved(header) {\r\n    return RESERVED_HEADERS.some((reserved) => header.has(reserved));\r\n}\r\n/**\r\n * Gets a file at a given URL, and returns it as a blob of data.\r\n *\r\n * Please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param url The URL of the fetched file\r\n * @param options Fetching options: a custom fetcher and/or headers.\r\n */\r\nfunction getFile(input, options = defaultGetFileOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n        const url = internal_toIriString(input);\r\n        const response = yield config.fetch(url, config.init);\r\n        if (!response.ok) {\r\n            throw new Error(`Fetching the File failed: ${response.status} ${response.statusText}.`);\r\n        }\r\n        const resourceInfo = internal_parseResourceInfo(response);\r\n        const data = yield response.blob();\r\n        const fileWithResourceInfo = Object.assign(data, {\r\n            internal_resourceInfo: resourceInfo,\r\n        });\r\n        return fileWithResourceInfo;\r\n    });\r\n}\r\n/**\r\n * Deletes a file at a given URL\r\n *\r\n * Please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param input The URL of the file to delete\r\n */\r\nfunction deleteFile(input, options = defaultGetFileOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n        const url = internal_toIriString(input);\r\n        const response = yield config.fetch(url, Object.assign(Object.assign({}, config.init), { method: \"DELETE\" }));\r\n        if (!response.ok) {\r\n            throw new Error(`Deleting the file failed: ${response.status} ${response.statusText}.`);\r\n        }\r\n    });\r\n}\r\n/**\r\n * Saves a file in a folder at a given URL. The server will return the final\r\n * filename (which may or may not be the given `slug`), it will return it in\r\n * the response's Location header.\r\n *\r\n * If something went wrong saving the file, the returned Promise will be rejected with an Error.\r\n *\r\n * Please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param folderUrl The URL of the folder where the new file is saved\r\n * @param file The file to be written\r\n * @param options Additional parameters for file creation (e.g. a slug)\r\n */\r\nfunction saveFileInContainer(folderUrl, file, options = defaultGetFileOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const folderUrlString = internal_toIriString(folderUrl);\r\n        const response = yield writeFile(folderUrlString, file, \"POST\", options);\r\n        if (!response.ok) {\r\n            throw new Error(`Saving the file failed: ${response.status} ${response.statusText}.`);\r\n        }\r\n        const locationHeader = response.headers.get(\"Location\");\r\n        if (locationHeader === null) {\r\n            throw new Error(\"Could not determine the location for the newly saved file.\");\r\n        }\r\n        const fileIri = new URL(locationHeader, new URL(folderUrlString).origin).href;\r\n        const blobClone = new Blob([file]);\r\n        return Object.assign(blobClone, {\r\n            internal_resourceInfo: {\r\n                sourceIri: fileIri,\r\n                isRawData: true,\r\n            },\r\n        });\r\n    });\r\n}\r\n/**\r\n * Saves a file at a given URL, erasing any previous content.\r\n *\r\n * If something went wrong saving the file, the returned Promise will be rejected with an Error.\r\n *\r\n * Please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param fileUrl The URL where the file is saved\r\n * @param file The file to be written\r\n * @param options Additional parameters for file creation (e.g. a slug)\r\n */\r\nfunction overwriteFile(fileUrl, file, options = defaultGetFileOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const fileUrlString = internal_toIriString(fileUrl);\r\n        const response = yield writeFile(fileUrlString, file, \"PUT\", options);\r\n        if (!response.ok) {\r\n            throw new Error(`Saving the file failed: ${response.status} ${response.statusText}.`);\r\n        }\r\n        const blobClone = new Blob([file]);\r\n        return Object.assign(blobClone, {\r\n            internal_resourceInfo: {\r\n                sourceIri: fileUrlString,\r\n                isRawData: true,\r\n            },\r\n        });\r\n    });\r\n}\r\n/**\r\n * Internal function that performs the actual write HTTP query, either POST\r\n * or PUT depending on the use case.\r\n *\r\n * @param fileUrl The URL where the file is saved\r\n * @param file The file to be written\r\n * @param method The HTTP method\r\n * @param options Additional parameters for file creation (e.g. a slug)\r\n */\r\nfunction writeFile(targetUrl, file, method, options) {\r\n    var _a, _b;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n        const headers = new Headers((_b = (_a = config.init) === null || _a === void 0 ? void 0 : _a.headers) !== null && _b !== void 0 ? _b : {});\r\n        if (containsReserved(headers)) {\r\n            throw new Error(`No reserved header (${RESERVED_HEADERS.join(\", \")}) should be set in the optional RequestInit.`);\r\n        }\r\n        // If a slug is in the parameters, set the request headers accordingly\r\n        if (config.slug !== undefined) {\r\n            headers.append(\"Slug\", config.slug);\r\n        }\r\n        headers.append(\"Content-Type\", file.type);\r\n        const targetUrlString = internal_toIriString(targetUrl);\r\n        return yield config.fetch(targetUrlString, Object.assign(Object.assign({}, config.init), { headers,\r\n            method, body: file }));\r\n    });\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Create a new Thing with a URL added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setUrl]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a URL value to.\r\n * @param property Property for which to add the given URL value.\r\n * @param url URL to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addUrl = (thing, property, url) => {\r\n    const predicateNode = asNamedNode(property);\r\n    const newThing = cloneThing(thing);\r\n    newThing.add(DataFactory.quad(toNode(newThing), predicateNode, toNode(url)));\r\n    return newThing;\r\n};\r\n/** @hidden Alias for [[addUrl]] for those who prefer IRI terminology. */\r\nconst addIri = addUrl;\r\n/**\r\n * Create a new Thing with a boolean added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setBoolean]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a boolean value to.\r\n * @param property Property for which to add the given boolean value.\r\n * @param value Boolean to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addBoolean = (thing, property, value) => {\r\n    return addLiteralOfType(thing, property, serializeBoolean(value), xmlSchemaTypes.boolean);\r\n};\r\n/**\r\n * Create a new Thing with a datetime added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a datetime value to.\r\n * @param property Property for which to add the given datetime value.\r\n * @param value Datetime to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addDatetime = (thing, property, value) => {\r\n    return addLiteralOfType(thing, property, serializeDatetime(value), xmlSchemaTypes.dateTime);\r\n};\r\n/**\r\n * Create a new Thing with a decimal added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDecimal]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a decimal value to.\r\n * @param property Property for which to add the given decimal value.\r\n * @param value Decimal to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addDecimal = (thing, property, value) => {\r\n    return addLiteralOfType(thing, property, serializeDecimal(value), xmlSchemaTypes.decimal);\r\n};\r\n/**\r\n * Create a new Thing with an integer added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setInteger]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add an integer value to.\r\n * @param property Property for which to add the given integer value.\r\n * @param value Integer to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addInteger = (thing, property, value) => {\r\n    return addLiteralOfType(thing, property, serializeInteger(value), xmlSchemaTypes.integer);\r\n};\r\nfunction addStringWithLocale(thing, property, value, locale) {\r\n    const literal = DataFactory.literal(value, normalizeLocale(locale));\r\n    return addLiteral(thing, property, literal);\r\n}\r\n/**\r\n * Create a new Thing with an unlocalised string added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setStringNoLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add an unlocalised string value to.\r\n * @param property Property for which to add the given string value.\r\n * @param value String to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addStringNoLocale = (thing, property, value) => {\r\n    return addLiteralOfType(thing, property, value, xmlSchemaTypes.string);\r\n};\r\nfunction addNamedNode(thing, property, value) {\r\n    const predicateNode = asNamedNode(property);\r\n    const newThing = cloneThing(thing);\r\n    newThing.add(DataFactory.quad(toNode(newThing), predicateNode, value));\r\n    return newThing;\r\n}\r\nfunction addLiteral(thing, property, value) {\r\n    const predicateNode = asNamedNode(property);\r\n    const newThing = cloneThing(thing);\r\n    newThing.add(DataFactory.quad(toNode(newThing), predicateNode, value));\r\n    return newThing;\r\n}\r\nfunction addLiteralOfType(thing, property, value, type) {\r\n    const literal = DataFactory.literal(value, type);\r\n    return addLiteral(thing, property, literal);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Find out what Access Modes have been granted to a given Agent specifically for a given Resource.\r\n *\r\n * Keep in mind that this function will not tell you what access the given Agent has through other ACL rules, e.g. public or group-specific permissions.\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.\r\n * @returns Which Access Modes have been granted to the Agent specifically for the given SolidDataset, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getAgentAccess(resourceInfo, agent) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getAgentResourceAccess(resourceInfo.internal_acl.resourceAcl, agent);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getAgentDefaultAccess(resourceInfo.internal_acl.fallbackAcl, agent);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Find out what Access Modes have been granted to specific Agents for a given Resource.\r\n *\r\n * Keep in mind that this function will not tell you what access arbitrary Agents might have through other ACL rules, e.g. public or group-specific permissions.\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param resourceInfo Information about the Resource to which Agents may have been granted access.\r\n * @returns Which Access Modes have been granted to which Agents specifically for the given SolidDataset, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getAgentAccessAll(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        const resourceAcl = getResourceAcl(resourceInfo);\r\n        return getAgentResourceAccessAll(resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        const fallbackAcl = getFallbackAcl(resourceInfo);\r\n        return getAgentDefaultAccessAll(fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Given an ACL SolidDataset, find out which access modes it provides to an Agent for its associated Resource.\r\n *\r\n * Keep in mind that this function will not tell you:\r\n * - what access the given Agent has through other ACL rules, e.g. public or group-specific permissions.\r\n * - what access the given Agent has to child Resources, in case the associated Resource is a Container (see [[getAgentDefaultAccessModes]] for that).\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.\r\n * @returns Which Access Modes have been granted to the Agent specifically for the Resource the given ACL SolidDataset is associated with.\r\n */\r\nfunction getAgentResourceAccess(aclDataset, agent) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);\r\n    const agentAccessModes = agentResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(agentAccessModes);\r\n}\r\n/**\r\n * Given an ACL SolidDataset, find out which access modes it provides to specific Agents for the associated Resource.\r\n *\r\n * Keep in mind that this function will not tell you:\r\n * - what access arbitrary Agents might have been given through other ACL rules, e.g. public or group-specific permissions.\r\n * - what access arbitrary Agents have to child Resources, in case the associated Resource is a Container.\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @returns Which Access Modes have been granted to which Agents specifically for the Resource the given ACL SolidDataset is associated with.\r\n */\r\nfunction getAgentResourceAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRules(resourceRules);\r\n    return getAccessByAgent(agentResourceRules);\r\n}\r\n/**\r\n * Given an ACL SolidDataset, modify the ACL Rules to set specific Access Modes for a given Agent.\r\n *\r\n * If the given ACL SolidDataset already includes ACL Rules that grant a certain set of Access Modes\r\n * to the given Agent, those will be overridden by the given Access Modes.\r\n *\r\n * Keep in mind that this function will not modify:\r\n * - access arbitrary Agents might have been given through other ACL rules, e.g. public or group-specific permissions.\r\n * - what access arbitrary Agents have to child Resources.\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param agent The Agent to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Agent.\r\n */\r\nfunction setAgentResourceAccess(aclDataset, agent, access) {\r\n    // First make sure that none of the pre-existing rules in the given ACL SolidDataset\r\n    // give the Agent access to the Resource:\r\n    let filteredAcl = aclDataset;\r\n    getThingAll(aclDataset).forEach((aclRule) => {\r\n        // Obtain both the Rule that no longer includes the given Agent,\r\n        // and a new Rule that includes all ACL Quads\r\n        // that do not pertain to the given Agent-Resource combination.\r\n        // Note that usually, the latter will no longer include any meaningful statements;\r\n        // we'll clean them up afterwards.\r\n        const [filteredRule, remainingRule] = removeAgentFromRule(aclRule, agent, aclDataset.internal_accessTo, \"resource\");\r\n        filteredAcl = setThing(filteredAcl, filteredRule);\r\n        filteredAcl = setThing(filteredAcl, remainingRule);\r\n    });\r\n    // Create a new Rule that only grants the given Agent the given Access Modes:\r\n    let newRule = internal_initialiseAclRule(access);\r\n    newRule = setIri(newRule, acl.accessTo, aclDataset.internal_accessTo);\r\n    newRule = setIri(newRule, acl.agent, agent);\r\n    const updatedAcl = setThing(filteredAcl, newRule);\r\n    // Remove any remaining Rules that do not contain any meaningful statements:\r\n    const cleanedAcl = internal_removeEmptyAclRules(updatedAcl);\r\n    return cleanedAcl;\r\n}\r\n/**\r\n * Given an ACL SolidDataset, find out which access modes it provides to an Agent for the associated Container Resource's child Resources.\r\n *\r\n * Keep in mind that this function will not tell you:\r\n * - what access the given Agent has through other ACL rules, e.g. public or group-specific permissions.\r\n * - what access the given Agent has to the Container Resource itself (see [[getAgentResourceAccess]] for that).\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules for a certain Container.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Container's children.\r\n * @returns Which Access Modes have been granted to the Agent specifically for the children of the Container associated with the given ACL SolidDataset.\r\n */\r\nfunction getAgentDefaultAccess(aclDataset, agent) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);\r\n    const agentAccessModes = agentResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(agentAccessModes);\r\n}\r\n/**\r\n * Given an ACL SolidDataset, find out which access modes it provides to specific Agents for the associated Container Resource's child Resources.\r\n *\r\n * Keep in mind that this function will not tell you:\r\n * - what access arbitrary Agents might have been given through other ACL rules, e.g. public or group-specific permissions.\r\n * - what access arbitrary Agents have to the Container Resource itself (see [[getAgentResourceAccessAll]] for that).\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @returns Which Access Modes have been granted to which Agents specifically for the children of the Container associated with the given ACL SolidDataset.\r\n */\r\nfunction getAgentDefaultAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRules(resourceRules);\r\n    return getAccessByAgent(agentResourceRules);\r\n}\r\n/**\r\n * Given an ACL SolidDataset, modify the ACL Rules to set specific default Access Modes for a given Agent.\r\n *\r\n * If the given ACL SolidDataset already includes ACL Rules that grant a certain set of default Access Modes\r\n * to the given Agent, those will be overridden by the given Access Modes.\r\n *\r\n * Keep in mind that this function will not modify:\r\n * - access arbitrary Agents might have been given through other ACL rules, e.g. public or group-specific permissions.\r\n * - what access arbitrary Agents have to the Container itself.\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param agent The Agent to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Agent.\r\n */\r\nfunction setAgentDefaultAccess(aclDataset, agent, access) {\r\n    // First make sure that none of the pre-existing rules in the given ACL SolidDataset\r\n    // give the Agent default access to the Resource:\r\n    let filteredAcl = aclDataset;\r\n    getThingAll(aclDataset).forEach((aclRule) => {\r\n        // Obtain both the Rule that no longer includes the given Agent,\r\n        // and a new Rule that includes all ACL Quads\r\n        // that do not pertain to the given Agent-Resource default combination.\r\n        // Note that usually, the latter will no longer include any meaningful statements;\r\n        // we'll clean them up afterwards.\r\n        const [filteredRule, remainingRule] = removeAgentFromRule(aclRule, agent, aclDataset.internal_accessTo, \"default\");\r\n        filteredAcl = setThing(filteredAcl, filteredRule);\r\n        filteredAcl = setThing(filteredAcl, remainingRule);\r\n    });\r\n    // Create a new Rule that only grants the given Agent the given default Access Modes:\r\n    let newRule = internal_initialiseAclRule(access);\r\n    newRule = setIri(newRule, acl.default, aclDataset.internal_accessTo);\r\n    newRule = setIri(newRule, acl.agent, agent);\r\n    const updatedAcl = setThing(filteredAcl, newRule);\r\n    // Remove any remaining Rules that do not contain any meaningful statements:\r\n    const cleanedAcl = internal_removeEmptyAclRules(updatedAcl);\r\n    return cleanedAcl;\r\n}\r\nfunction getAgentAclRulesForAgent(aclRules, agent) {\r\n    return internal_getAclRulesForIri(aclRules, agent, acl.agent);\r\n}\r\nfunction getAgentAclRules(aclRules) {\r\n    return aclRules.filter(isAgentAclRule);\r\n}\r\nfunction isAgentAclRule(aclRule) {\r\n    return getIri(aclRule, acl.agent) !== null;\r\n}\r\n/**\r\n * Given an ACL Rule, return two new ACL Rules that cover all the input Rule's use cases,\r\n * except for giving the given Agent access to the given Resource.\r\n *\r\n * @param rule The ACL Rule that should no longer apply for a given Agent to a given Resource.\r\n * @param agent The Agent that should be removed from the Rule for the given Resource.\r\n * @param resourceIri The Resource to which the Rule should no longer apply for the given Agent.\r\n * @returns A tuple with the original ACL Rule sans the given Agent, and a new ACL Rule for the given Agent for the remaining Resources, respectively.\r\n */\r\nfunction removeAgentFromRule(rule, agent, resourceIri, ruleType) {\r\n    // If the existing Rule does not apply to the given Agent, we don't need to split up.\r\n    // Without this check, we'd be creating a new rule for the given Agent (ruleForOtherTargets)\r\n    // that would give it access it does not currently have:\r\n    if (!getIriAll(rule, acl.agent).includes(agent)) {\r\n        const emptyRule = internal_initialiseAclRule({\r\n            read: false,\r\n            append: false,\r\n            write: false,\r\n            control: false,\r\n        });\r\n        return [rule, emptyRule];\r\n    }\r\n    // The existing rule will keep applying to Agents other than the given one:\r\n    const ruleWithoutAgent = removeIri(rule, acl.agent, agent);\r\n    // The agent already had some access in the rule, so duplicate it...\r\n    let ruleForOtherTargets = internal_duplicateAclRule(rule);\r\n    // ...but remove access to the original Resource:\r\n    ruleForOtherTargets = removeIri(ruleForOtherTargets, ruleType === \"resource\" ? acl.accessTo : acl.default, resourceIri);\r\n    // Only apply the new Rule to the given Agent (because the existing Rule covers the others)\r\n    ruleForOtherTargets = setIri(ruleForOtherTargets, acl.agent, agent);\r\n    ruleForOtherTargets = removeAll(ruleForOtherTargets, acl.agentClass);\r\n    ruleForOtherTargets = removeAll(ruleForOtherTargets, acl.agentGroup);\r\n    return [ruleWithoutAgent, ruleForOtherTargets];\r\n}\r\nfunction getAccessByAgent(aclRules) {\r\n    return internal_getAccessByIri(aclRules, acl.agent);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Find out what Access Modes have been granted to a given Group of agents specifically for a given Resource.\r\n *\r\n * Keep in mind that this function will not tell you what access members of the given Group have through other ACL rules, e.g. public permissions.\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Group may have been granted access.\r\n * @param group URL of the Group for which to retrieve what access it has to the Resource.\r\n * @returns Which Access Modes have been granted to the Group specifically for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getGroupAccess(resourceInfo, group) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getGroupResourceAccess(resourceInfo.internal_acl.resourceAcl, group);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getGroupDefaultAccess(resourceInfo.internal_acl.fallbackAcl, group);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Find out what Access Modes have been granted to specific Groups of agents for a given Resource.\r\n *\r\n * Keep in mind that this function will not tell you what access members of each Group have through other ACL rules, e.g. public permissions.\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Group may have been granted access.\r\n * @returns Which Access Modes have been granted to which Groups specifically for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getGroupAccessAll(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        const resourceAcl = getResourceAcl(resourceInfo);\r\n        return getGroupResourceAccessAll(resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        const fallbackAcl = getFallbackAcl(resourceInfo);\r\n        return getGroupDefaultAccessAll(fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Given an ACL SolidDataset, find out which access modes it provides to a Group for its associated Resource.\r\n *\r\n * Keep in mind that this function will not tell you:\r\n * - what access members of the given Group have through other ACL rules, e.g. public permissions.\r\n * - what access members of the given Group have to child Resources, in case the associated Resource is a Container (see [[getGroupDefaultAccessModes]] for that).\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param group URL of the Group for which to retrieve what access it has to the Resource.\r\n * @returns Which Access Modes have been granted to the Group specifically for the Resource the given ACL SolidDataset is associated with.\r\n */\r\nfunction getGroupResourceAccess(aclDataset, group) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const groupResourceRules = getGroupAclRuleForGroup(resourceRules, group);\r\n    const groupAccessModes = groupResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(groupAccessModes);\r\n}\r\n/**\r\n * Given an ACL SolidDataset, find out which access modes it provides to specific Groups for the associated Resource.\r\n *\r\n * Keep in mind that this function will not tell you:\r\n * - what access arbitrary members of these Groups might have been given through other ACL rules, e.g. public permissions.\r\n * - what access arbitrary members of these Groups have to child Resources, in case the associated Resource is a Container.\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @returns Which Access Modes have been granted to which Groups specifically for the Resource the given ACL SolidDataset is associated with.\r\n */\r\nfunction getGroupResourceAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    return getAccessByGroup(resourceRules);\r\n}\r\n/**\r\n * Given an ACL SolidDataset, find out which access modes it provides to a given Group for the associated Container Resource's child Resources.\r\n *\r\n * Keep in mind that this function will not tell you:\r\n * - what access members of the given Group have through other ACL rules, e.g. public permissions.\r\n * - what access members of the given Group have to the Container Resource itself (see [[getGroupResourceAccess]] for that).\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules for a certain Container.\r\n * @param group URL of the Group for which to retrieve what access it has to the child Resources of the given Container.\r\n * @returns Which Access Modes have been granted to the Group specifically for the children of the Container associated with the given ACL SolidDataset.\r\n */\r\nfunction getGroupDefaultAccess(aclDataset, group) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const groupDefaultRules = getGroupAclRuleForGroup(defaultRules, group);\r\n    const groupAccessModes = groupDefaultRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(groupAccessModes);\r\n}\r\n/**\r\n * Given an ACL SolidDataset, find out which access modes it provides to specific Groups for the associated Container Resource's child Resources.\r\n *\r\n * Keep in mind that this function will not tell you:\r\n * - what access arbitrary members of these Groups have through other ACL rules, e.g. public permissions.\r\n * - what access arbitrary members of these Groups have to the Container Resource itself (see [[getGroupResourceAccessAll]] for that).\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules for a certain Container.\r\n * @returns Which Access Modes have been granted to which Groups specifically for the children of the Container associated with the given ACL SolidDataset.\r\n */\r\nfunction getGroupDefaultAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    return getAccessByGroup(defaultRules);\r\n}\r\nfunction getGroupAclRuleForGroup(rules, group) {\r\n    return internal_getAclRulesForIri(rules, group, acl.agentGroup);\r\n}\r\nfunction getAccessByGroup(aclRules) {\r\n    return internal_getAccessByIri(aclRules, acl.agentGroup);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Find out what Access Modes have been granted to everyone for a given Resource.\r\n *\r\n * Keep in mind that this function will not tell you what access specific Agents have through other ACL rules, e.g. agent- or group-specific permissions.\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.\r\n * @returns Which Access Modes have been granted to everyone for the given SolidDataset, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getPublicAccess(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getPublicResourceAccess(resourceInfo.internal_acl.resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getPublicDefaultAccess(resourceInfo.internal_acl.fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Given an ACL SolidDataset, find out which access modes it provides to everyone for its associated Resource.\r\n *\r\n * Keep in mind that this function will not tell you:\r\n * - what access specific Agents have through other ACL rules, e.g. agent- or group-specific permissions.\r\n * - what access anyone has to child Resources, in case the associated Resource is a Container (see [[getDefaultResourceAccess]] for that).\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @returns Which Access Modes have been granted to everyone for the Resource the given ACL SolidDataset is associated with.\r\n */\r\nfunction getPublicResourceAccess(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);\r\n    const publicAccessModes = publicResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(publicAccessModes);\r\n}\r\n/**\r\n * Given an ACL SolidDataset, find out which access modes it provides to everyone for the associated Container Resource's child Resources.\r\n *\r\n * Keep in mind that this function will not tell you:\r\n * - what access specific Agents have through other ACL rules, e.g. agent- or group-specific permissions.\r\n * - what access anyone has to the Container Resource itself (see [[getPublicResourceAccess]] for that).\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules for a certain Container.\r\n * @returns Which Access Modes have been granted to everyone for the children of the Container associated with the given ACL SolidDataset.\r\n */\r\nfunction getPublicDefaultAccess(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);\r\n    const publicAccessModes = publicResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(publicAccessModes);\r\n}\r\n/**\r\n * Given an ACL SolidDataset, modify the ACL Rules to set specific Access Modes for the public.\r\n *\r\n * If the given ACL SolidDataset already includes ACL Rules that grant a certain set of Access Modes\r\n * to the public, those will be overridden by the given Access Modes.\r\n *\r\n * Keep in mind that this function will not modify:\r\n * - access arbitrary Agents might have been given through other ACL rules, e.g. agent- or group-specific permissions.\r\n * - what access arbitrary Agents have to child Resources.\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param access The Access Modes to grant to the public.\r\n */\r\nfunction setPublicResourceAccess(aclDataset, access) {\r\n    // First make sure that none of the pre-existing rules in the given ACL SolidDataset\r\n    // give the public access to the Resource:\r\n    let filteredAcl = aclDataset;\r\n    getThingAll(aclDataset).forEach((aclRule) => {\r\n        // Obtain both the Rule that no longer includes the public,\r\n        // and a new Rule that includes all ACL Quads\r\n        // that do not pertain to the given Public-Resource combination.\r\n        // Note that usually, the latter will no longer include any meaningful statements;\r\n        // we'll clean them up afterwards.\r\n        const [filteredRule, remainingRule] = removePublicFromRule(aclRule, aclDataset.internal_accessTo, \"resource\");\r\n        filteredAcl = setThing(filteredAcl, filteredRule);\r\n        filteredAcl = setThing(filteredAcl, remainingRule);\r\n    });\r\n    // Create a new Rule that only grants the public the given Access Modes:\r\n    let newRule = internal_initialiseAclRule(access);\r\n    newRule = setIri(newRule, acl.accessTo, aclDataset.internal_accessTo);\r\n    newRule = setIri(newRule, acl.agentClass, foaf.Agent);\r\n    const updatedAcl = setThing(filteredAcl, newRule);\r\n    // Remove any remaining Rules that do not contain any meaningful statements:\r\n    return internal_removeEmptyAclRules(updatedAcl);\r\n}\r\n/**\r\n * Given an ACL SolidDataset, modify the ACL Rules to set specific default Access Modes for the public.\r\n *\r\n * If the given ACL SolidDataset already includes ACL Rules that grant a certain set of default Access Modes\r\n * to the public, those will be overridden by the given Access Modes.\r\n *\r\n * Keep in mind that this function will not modify:\r\n * - access arbitrary Agents might have been given through other ACL rules, e.g. public or group-specific permissions.\r\n * - what access arbitrary Agents have to the Container itself.\r\n *\r\n * Also, please note that this function is still experimental: its API can change in non-major releases.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param access The Access Modes to grant to the public.\r\n */\r\nfunction setPublicDefaultAccess(aclDataset, access) {\r\n    // First make sure that none of the pre-existing rules in the given ACL SolidDataset\r\n    // give the public default access to the Resource:\r\n    let filteredAcl = aclDataset;\r\n    getThingAll(aclDataset).forEach((aclRule) => {\r\n        // Obtain both the Rule that no longer includes the public,\r\n        // and a new Rule that includes all ACL Quads\r\n        // that do not pertain to the given Public-Resource default combination.\r\n        // Note that usually, the latter will no longer include any meaningful statements;\r\n        // we'll clean them up afterwards.\r\n        const [filteredRule, remainingRule] = removePublicFromRule(aclRule, aclDataset.internal_accessTo, \"default\");\r\n        filteredAcl = setThing(filteredAcl, filteredRule);\r\n        filteredAcl = setThing(filteredAcl, remainingRule);\r\n    });\r\n    // Create a new Rule that only grants the public the given default Access Modes:\r\n    let newRule = internal_initialiseAclRule(access);\r\n    newRule = setIri(newRule, acl.default, aclDataset.internal_accessTo);\r\n    newRule = setIri(newRule, acl.agentClass, foaf.Agent);\r\n    const updatedAcl = setThing(filteredAcl, newRule);\r\n    // Remove any remaining Rules that do not contain any meaningful statements:\r\n    const cleanedAcl = internal_removeEmptyAclRules(updatedAcl);\r\n    return cleanedAcl;\r\n}\r\n/**\r\n * Given an ACL Rule, return two new ACL Rules that cover all the input Rule's use cases,\r\n * except for giving the public access to the given Resource.\r\n *\r\n * @param rule The ACL Rule that should no longer apply for the public to a given Resource.\r\n * @param resourceIri The Resource to which the Rule should no longer apply for the public.\r\n * @returns A tuple with the original ACL Rule sans the public, and a new ACL Rule for the public for the remaining Resources, respectively.\r\n */\r\nfunction removePublicFromRule(rule, resourceIri, ruleType) {\r\n    // If the existing Rule does not apply to the given Agent, we don't need to split up.\r\n    // Without this check, we'd be creating a new rule for the given Agent (ruleForOtherTargets)\r\n    // that would give it access it does not currently have:\r\n    if (!getIriAll(rule, acl.agentClass).includes(foaf.Agent)) {\r\n        const emptyRule = internal_initialiseAclRule({\r\n            read: false,\r\n            append: false,\r\n            write: false,\r\n            control: false,\r\n        });\r\n        return [rule, emptyRule];\r\n    }\r\n    // The existing rule will keep applying to the public:\r\n    const ruleWithoutPublic = removeIri(rule, acl.agentClass, foaf.Agent);\r\n    // The new rule will...\r\n    let ruleForOtherTargets = internal_duplicateAclRule(rule);\r\n    // ...*only* apply to the public (because the existing Rule covers the others)...\r\n    ruleForOtherTargets = setIri(ruleForOtherTargets, acl.agentClass, foaf.Agent);\r\n    ruleForOtherTargets = removeAll(ruleForOtherTargets, acl.agent);\r\n    ruleForOtherTargets = removeAll(ruleForOtherTargets, acl.agentGroup);\r\n    // ...but not to the given Resource:\r\n    ruleForOtherTargets = removeIri(ruleForOtherTargets, ruleType === \"resource\" ? acl.accessTo : acl.default, resourceIri);\r\n    return [ruleWithoutPublic, ruleForOtherTargets];\r\n}\r\nfunction getClassAclRulesForClass(aclRules, agentClass) {\r\n    return aclRules.filter((rule) => appliesToClass(rule, agentClass));\r\n}\r\nfunction appliesToClass(aclRule, agentClass) {\r\n    return getIriAll(aclRule, acl.agentClass).includes(agentClass);\r\n}\n\nexport { addBoolean, addDatetime, addDecimal, addInteger, addIri, addLiteral, addNamedNode, addStringWithLocale as addStringInLocale, addStringNoLocale, addStringNoLocale as addStringUnlocalized, addStringWithLocale, addUrl, asIri, asUrl, createAcl, createAclFromFallbackAcl, createSolidDataset as createLitDataset, createSolidDataset, createThing, deleteAclFor, deleteFile, getSolidDataset as fetchLitDataset, getSolidDatasetWithAcl as fetchLitDatasetWithAcl, fetchResourceInfoWithAcl, getAgentAccess, getAgentAccessAll, getAgentDefaultAccess, getAgentDefaultAccessAll, getAgentResourceAccess, getAgentResourceAccessAll, getBoolean, getBooleanAll, getContentType, getDatetime, getDatetimeAll, getDecimal, getDecimalAll, getFallbackAcl, getSourceUrl as getFetchedFrom, getFile, getGroupAccess, getGroupAccessAll, getGroupDefaultAccess, getGroupDefaultAccessAll, getGroupResourceAccess, getGroupResourceAccessAll, getInteger, getIntegerAll, getIri, getIriAll, getLiteral, getLiteralAll, getNamedNode, getNamedNodeAll, getPublicAccess, getPublicDefaultAccess, getPublicResourceAccess, getResourceAcl, getSolidDataset, getSolidDatasetWithAcl, getSourceIri, getSourceUrl, getStringWithLocaleAll as getStringInLocaleAll, getStringWithLocale as getStringInLocaleOne, getStringNoLocale, getStringNoLocaleAll, getStringNoLocaleAll as getStringUnlocalizedAll, getStringNoLocale as getStringUnlocalizedOne, getStringWithLocale, getStringWithLocaleAll, getThing, getThingAll, getUrl, getUrlAll, hasAccessibleAcl, hasFallbackAcl, hasResourceAcl, isContainer, isRawData as isLitDataset, isRawData, overwriteFile, removeAll, removeBoolean, removeDatetime, removeDecimal, removeInteger, removeIri, removeLiteral, removeNamedNode, removeStringWithLocale as removeStringInLocale, removeStringNoLocale, removeStringNoLocale as removeStringUnlocalized, removeStringWithLocale, removeThing, removeUrl, saveAclFor, saveFileInContainer, saveSolidDatasetAt as saveLitDatasetAt, saveSolidDatasetInContainer as saveLitDatasetInContainer, saveSolidDatasetAt, saveSolidDatasetInContainer, setAgentDefaultAccess, setAgentResourceAccess, setBoolean, setDatetime, setDecimal, setInteger, setIri, setLiteral, setNamedNode, setPublicDefaultAccess, setPublicResourceAccess, setStringWithLocale as setStringInLocale, setStringNoLocale, setStringNoLocale as setStringUnlocalized, setStringWithLocale, setThing, setUrl, createAcl as unstable_createAcl, createAclFromFallbackAcl as unstable_createAclFromFallbackAcl, deleteAclFor as unstable_deleteAclFor, deleteFile as unstable_deleteFile, getFile as unstable_fetchFile, getSolidDatasetWithAcl as unstable_fetchLitDatasetWithAcl, fetchResourceInfoWithAcl as unstable_fetchResourceInfoWithAcl, getAgentAccessAll as unstable_getAgentAccessAll, getAgentAccess as unstable_getAgentAccessOne, getAgentDefaultAccessAll as unstable_getAgentDefaultAccessAll, getAgentDefaultAccess as unstable_getAgentDefaultAccessOne, getAgentResourceAccessAll as unstable_getAgentResourceAccessAll, getAgentResourceAccess as unstable_getAgentResourceAccessOne, getFallbackAcl as unstable_getFallbackAcl, getGroupAccessAll as unstable_getGroupAccessAll, getGroupAccess as unstable_getGroupAccessOne, getGroupDefaultAccessAll as unstable_getGroupDefaultAccessAll, getGroupDefaultAccess as unstable_getGroupDefaultAccessOne, getGroupResourceAccessAll as unstable_getGroupResourceAccessAll, getGroupResourceAccess as unstable_getGroupResourceAccessOne, getPublicAccess as unstable_getPublicAccess, getPublicDefaultAccess as unstable_getPublicDefaultAccess, getPublicResourceAccess as unstable_getPublicResourceAccess, getResourceAcl as unstable_getResourceAcl, hasAccessibleAcl as unstable_hasAccessibleAcl, hasFallbackAcl as unstable_hasFallbackAcl, hasResourceAcl as unstable_hasResourceAcl, overwriteFile as unstable_overwriteFile, saveAclFor as unstable_saveAclFor, saveFileInContainer as unstable_saveFileInContainer, setAgentDefaultAccess as unstable_setAgentDefaultAccess, setAgentResourceAccess as unstable_setAgentResourceAccess, setPublicDefaultAccess as unstable_setPublicDefaultAccess, setPublicResourceAccess as unstable_setPublicResourceAccess };\n","//https://docs.inrupt.com/client-libraries/solid-client-js/tutorial/manage-access-control-list.html\r\nimport {\r\n  getSolidDatasetWithAcl,\r\n  getPublicAccess,\r\n  hasResourceAcl,\r\n  hasFallbackAcl,\r\n  hasAccessibleAcl,\r\n  //createAcl,\r\n  createAclFromFallbackAcl,\r\n  getResourceAcl,\r\n  //setAgentResourceAccess,\r\n  setPublicDefaultAccess,\r\n  saveAclFor,\r\n} from \"@inrupt/solid-client\";\r\n\r\nexport default {\r\n  created(){\r\n\r\n  },\r\n  methods: {\r\n    async readPublicAccess(url){\r\n      const myDatasetWithAcl = await getSolidDatasetWithAcl(url);\r\n      const publicAccess = getPublicAccess(myDatasetWithAcl);\r\n      console.log(\"publicAccess\", publicAccess)\r\n    },\r\n    async setPublicAccess(url, pattern){\r\n      // Fetch the SolidDataset and its associated ACLs, if available:\r\n      const myDatasetWithAcl = await getSolidDatasetWithAcl(url);\r\n\r\n      // Obtain the SolidDataset's own ACL, if available,\r\n      // or initialise a new one, if possible:\r\n      let resourceAcl;\r\n      if (!hasResourceAcl(myDatasetWithAcl)) {\r\n        if (!hasAccessibleAcl(myDatasetWithAcl)) {\r\n          throw new Error(\r\n            \"The current user does not have permission to change access rights to this Resource.\"\r\n          );\r\n        }\r\n        if (!hasFallbackAcl(myDatasetWithAcl)) {\r\n          throw new Error(\r\n            \"The current user does not have permission to see who currently has access to this Resource.\"\r\n          );\r\n          // Alternatively, initialise a new empty ACL as follows,\r\n          // but be aware that if you do not give someone Control access,\r\n          // **nobody will ever be able to change Access permissions in the future**:\r\n          // resourceAcl = createAcl(myDatasetWithAcl);\r\n        }\r\n        resourceAcl = createAclFromFallbackAcl(myDatasetWithAcl);\r\n      } else {\r\n        resourceAcl = getResourceAcl(myDatasetWithAcl);\r\n      }\r\n\r\n      // Give someone Control access to the given Resource:\r\n      /*const updatedAcl = setAgentResourceAccess(\r\n      resourceAcl,\r\n      \"https://some.pod/profile#webId\",\r\n      pattern\r\n    );*/\r\n    const updatedAcl = setPublicDefaultAccess(\r\n      resourceAcl,\r\n      { read: true, append: true, write: false, control: false },\r\n    );\r\n    \r\n    // Now save the ACL:\r\n    await saveAclFor(myDatasetWithAcl, updatedAcl);\r\n    console.log(\"Pattern saved for \",url, pattern)\r\n  }\r\n\r\n}\r\n}\r\n","const isMatch = require('./isMatch')\n\nclass DatasetCore {\n  constructor (quads) {\n    this.quads = new Set()\n\n    if (quads) {\n      for (const quad of quads) {\n        this.quads.add(quad)\n      }\n    }\n  }\n\n  get size () {\n    return this.quads.size\n  }\n\n  add (quad) {\n    if (!this.has(quad)) {\n      this.quads.add(quad)\n    }\n\n    return this\n  }\n\n  delete (quad) {\n    for (const localQuad of this) {\n      if (isMatch(quad, localQuad.subject, localQuad.predicate, localQuad.object, localQuad.graph)) {\n        this.quads.delete(localQuad)\n\n        return this\n      }\n    }\n\n    return this\n  }\n\n  has (quad) {\n    for (const other of this) {\n      if (isMatch(other, quad.subject, quad.predicate, quad.object, quad.graph)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  match (subject, predicate, object, graph) {\n    const matches = new Set()\n\n    for (const quad of this) {\n      if (isMatch(quad, subject, predicate, object, graph)) {\n        matches.add(quad)\n      }\n    }\n\n    return new this.constructor(matches)\n  }\n\n  [Symbol.iterator] () {\n    return this.quads[Symbol.iterator]()\n  }\n}\n\nmodule.exports = DatasetCore\n","function isMatch (quad, subject, predicate, object, graph) {\n  if (subject && !quad.subject.equals(subject)) {\n    return false\n  }\n\n  if (predicate && !quad.predicate.equals(predicate)) {\n    return false\n  }\n\n  if (object && !quad.object.equals(object)) {\n    return false\n  }\n\n  if (graph && !quad.graph.equals(graph)) {\n    return false\n  }\n\n  return true\n}\n\nmodule.exports = isMatch\n"],"sourceRoot":""}